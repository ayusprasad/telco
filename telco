{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyMLpzNgnEji9JwtSoT/w+Go",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/ayusprasad/telco/blob/main/telco\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**TASK-1  , DATA PREPERATION**"
      ],
      "metadata": {
        "id": "c079Ztert2q2"
      }
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "wWd1LuxPr-SP"
      },
      "outputs": [],
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "import seaborn as sns\n",
        "from sklearn.cluster import KMeans\n",
        "from scipy.stats import pearsonr\n",
        "import matplotlib.pyplot as plt\n",
        "from sklearn.preprocessing import StandardScaler, LabelEncoder\n",
        "from sklearn.impute import SimpleImputer\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.linear_model import LinearRegression, LogisticRegression\n",
        "from sklearn.pipeline import Pipeline\n",
        "from sklearn.preprocessing import PolynomialFeatures\n",
        "from sklearn.tree import DecisionTreeClassifier\n",
        "from sklearn.ensemble import RandomForestClassifier\n",
        "from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# LOAD DATA SET\n",
        "df=pd.read_csv(\"telco_cus.csv\")"
      ],
      "metadata": {
        "id": "Ho1yMNFjsWjB"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df.head(4)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 293
        },
        "id": "yVEfYIImuEzx",
        "outputId": "1c452467-e5a8-4080-e37a-e82dd2ff3365"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   customerID  gender  SeniorCitizen Partner Dependents  tenure PhoneService  \\\n",
              "0  7590-VHVEG  Female              0     Yes         No       1           No   \n",
              "1  5575-GNVDE    Male              0      No         No      34          Yes   \n",
              "2  3668-QPYBK    Male              0      No         No       2          Yes   \n",
              "3  7795-CFOCW    Male              0      No         No      45           No   \n",
              "\n",
              "      MultipleLines InternetService OnlineSecurity  ... DeviceProtection  \\\n",
              "0  No phone service             DSL             No  ...               No   \n",
              "1                No             DSL            Yes  ...              Yes   \n",
              "2                No             DSL            Yes  ...               No   \n",
              "3  No phone service             DSL            Yes  ...              Yes   \n",
              "\n",
              "  TechSupport StreamingTV StreamingMovies        Contract PaperlessBilling  \\\n",
              "0          No          No              No  Month-to-month              Yes   \n",
              "1          No          No              No        One year               No   \n",
              "2          No          No              No  Month-to-month              Yes   \n",
              "3         Yes          No              No        One year               No   \n",
              "\n",
              "               PaymentMethod MonthlyCharges  TotalCharges  Churn  \n",
              "0           Electronic check          29.85         29.85     No  \n",
              "1               Mailed check          56.95       1889.50     No  \n",
              "2               Mailed check          53.85        108.15    Yes  \n",
              "3  Bank transfer (automatic)          42.30       1840.75     No  \n",
              "\n",
              "[4 rows x 21 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-78f978f5-0b9b-423d-8830-4bdb18e1d50d\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>customerID</th>\n",
              "      <th>gender</th>\n",
              "      <th>SeniorCitizen</th>\n",
              "      <th>Partner</th>\n",
              "      <th>Dependents</th>\n",
              "      <th>tenure</th>\n",
              "      <th>PhoneService</th>\n",
              "      <th>MultipleLines</th>\n",
              "      <th>InternetService</th>\n",
              "      <th>OnlineSecurity</th>\n",
              "      <th>...</th>\n",
              "      <th>DeviceProtection</th>\n",
              "      <th>TechSupport</th>\n",
              "      <th>StreamingTV</th>\n",
              "      <th>StreamingMovies</th>\n",
              "      <th>Contract</th>\n",
              "      <th>PaperlessBilling</th>\n",
              "      <th>PaymentMethod</th>\n",
              "      <th>MonthlyCharges</th>\n",
              "      <th>TotalCharges</th>\n",
              "      <th>Churn</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>7590-VHVEG</td>\n",
              "      <td>Female</td>\n",
              "      <td>0</td>\n",
              "      <td>Yes</td>\n",
              "      <td>No</td>\n",
              "      <td>1</td>\n",
              "      <td>No</td>\n",
              "      <td>No phone service</td>\n",
              "      <td>DSL</td>\n",
              "      <td>No</td>\n",
              "      <td>...</td>\n",
              "      <td>No</td>\n",
              "      <td>No</td>\n",
              "      <td>No</td>\n",
              "      <td>No</td>\n",
              "      <td>Month-to-month</td>\n",
              "      <td>Yes</td>\n",
              "      <td>Electronic check</td>\n",
              "      <td>29.85</td>\n",
              "      <td>29.85</td>\n",
              "      <td>No</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>5575-GNVDE</td>\n",
              "      <td>Male</td>\n",
              "      <td>0</td>\n",
              "      <td>No</td>\n",
              "      <td>No</td>\n",
              "      <td>34</td>\n",
              "      <td>Yes</td>\n",
              "      <td>No</td>\n",
              "      <td>DSL</td>\n",
              "      <td>Yes</td>\n",
              "      <td>...</td>\n",
              "      <td>Yes</td>\n",
              "      <td>No</td>\n",
              "      <td>No</td>\n",
              "      <td>No</td>\n",
              "      <td>One year</td>\n",
              "      <td>No</td>\n",
              "      <td>Mailed check</td>\n",
              "      <td>56.95</td>\n",
              "      <td>1889.50</td>\n",
              "      <td>No</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>3668-QPYBK</td>\n",
              "      <td>Male</td>\n",
              "      <td>0</td>\n",
              "      <td>No</td>\n",
              "      <td>No</td>\n",
              "      <td>2</td>\n",
              "      <td>Yes</td>\n",
              "      <td>No</td>\n",
              "      <td>DSL</td>\n",
              "      <td>Yes</td>\n",
              "      <td>...</td>\n",
              "      <td>No</td>\n",
              "      <td>No</td>\n",
              "      <td>No</td>\n",
              "      <td>No</td>\n",
              "      <td>Month-to-month</td>\n",
              "      <td>Yes</td>\n",
              "      <td>Mailed check</td>\n",
              "      <td>53.85</td>\n",
              "      <td>108.15</td>\n",
              "      <td>Yes</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>7795-CFOCW</td>\n",
              "      <td>Male</td>\n",
              "      <td>0</td>\n",
              "      <td>No</td>\n",
              "      <td>No</td>\n",
              "      <td>45</td>\n",
              "      <td>No</td>\n",
              "      <td>No phone service</td>\n",
              "      <td>DSL</td>\n",
              "      <td>Yes</td>\n",
              "      <td>...</td>\n",
              "      <td>Yes</td>\n",
              "      <td>Yes</td>\n",
              "      <td>No</td>\n",
              "      <td>No</td>\n",
              "      <td>One year</td>\n",
              "      <td>No</td>\n",
              "      <td>Bank transfer (automatic)</td>\n",
              "      <td>42.30</td>\n",
              "      <td>1840.75</td>\n",
              "      <td>No</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>4 rows × 21 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-78f978f5-0b9b-423d-8830-4bdb18e1d50d')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-78f978f5-0b9b-423d-8830-4bdb18e1d50d button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-78f978f5-0b9b-423d-8830-4bdb18e1d50d');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-1506e55c-e1bc-4a29-afee-1c1ae78e02db\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-1506e55c-e1bc-4a29-afee-1c1ae78e02db')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-1506e55c-e1bc-4a29-afee-1c1ae78e02db button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df"
            }
          },
          "metadata": {},
          "execution_count": 3
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.tail()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 342
        },
        "id": "jHcgZw7SuQsn",
        "outputId": "4e73d90a-cf86-4807-cb80-674e570a0f38"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "      customerID  gender  SeniorCitizen Partner Dependents  tenure  \\\n",
              "7038  6840-RESVB    Male              0     Yes        Yes      24   \n",
              "7039  2234-XADUH  Female              0     Yes        Yes      72   \n",
              "7040  4801-JZAZL  Female              0     Yes        Yes      11   \n",
              "7041  8361-LTMKD    Male              1     Yes         No       4   \n",
              "7042  3186-AJIEK    Male              0      No         No      66   \n",
              "\n",
              "     PhoneService     MultipleLines InternetService OnlineSecurity  ...  \\\n",
              "7038          Yes               Yes             DSL            Yes  ...   \n",
              "7039          Yes               Yes     Fiber optic             No  ...   \n",
              "7040           No  No phone service             DSL            Yes  ...   \n",
              "7041          Yes               Yes     Fiber optic             No  ...   \n",
              "7042          Yes                No     Fiber optic            Yes  ...   \n",
              "\n",
              "     DeviceProtection TechSupport StreamingTV StreamingMovies        Contract  \\\n",
              "7038              Yes         Yes         Yes             Yes        One year   \n",
              "7039              Yes          No         Yes             Yes        One year   \n",
              "7040               No          No          No              No  Month-to-month   \n",
              "7041               No          No          No              No  Month-to-month   \n",
              "7042              Yes         Yes         Yes             Yes        Two year   \n",
              "\n",
              "     PaperlessBilling              PaymentMethod MonthlyCharges  TotalCharges  \\\n",
              "7038              Yes               Mailed check          84.80       1990.50   \n",
              "7039              Yes    Credit card (automatic)         103.20       7362.90   \n",
              "7040              Yes           Electronic check          29.60        346.45   \n",
              "7041              Yes               Mailed check          74.40        306.60   \n",
              "7042              Yes  Bank transfer (automatic)         105.65       6844.50   \n",
              "\n",
              "      Churn  \n",
              "7038     No  \n",
              "7039     No  \n",
              "7040     No  \n",
              "7041    Yes  \n",
              "7042     No  \n",
              "\n",
              "[5 rows x 21 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-1ad4b3bc-0496-43c6-916c-63b78c09bcde\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>customerID</th>\n",
              "      <th>gender</th>\n",
              "      <th>SeniorCitizen</th>\n",
              "      <th>Partner</th>\n",
              "      <th>Dependents</th>\n",
              "      <th>tenure</th>\n",
              "      <th>PhoneService</th>\n",
              "      <th>MultipleLines</th>\n",
              "      <th>InternetService</th>\n",
              "      <th>OnlineSecurity</th>\n",
              "      <th>...</th>\n",
              "      <th>DeviceProtection</th>\n",
              "      <th>TechSupport</th>\n",
              "      <th>StreamingTV</th>\n",
              "      <th>StreamingMovies</th>\n",
              "      <th>Contract</th>\n",
              "      <th>PaperlessBilling</th>\n",
              "      <th>PaymentMethod</th>\n",
              "      <th>MonthlyCharges</th>\n",
              "      <th>TotalCharges</th>\n",
              "      <th>Churn</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>7038</th>\n",
              "      <td>6840-RESVB</td>\n",
              "      <td>Male</td>\n",
              "      <td>0</td>\n",
              "      <td>Yes</td>\n",
              "      <td>Yes</td>\n",
              "      <td>24</td>\n",
              "      <td>Yes</td>\n",
              "      <td>Yes</td>\n",
              "      <td>DSL</td>\n",
              "      <td>Yes</td>\n",
              "      <td>...</td>\n",
              "      <td>Yes</td>\n",
              "      <td>Yes</td>\n",
              "      <td>Yes</td>\n",
              "      <td>Yes</td>\n",
              "      <td>One year</td>\n",
              "      <td>Yes</td>\n",
              "      <td>Mailed check</td>\n",
              "      <td>84.80</td>\n",
              "      <td>1990.50</td>\n",
              "      <td>No</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7039</th>\n",
              "      <td>2234-XADUH</td>\n",
              "      <td>Female</td>\n",
              "      <td>0</td>\n",
              "      <td>Yes</td>\n",
              "      <td>Yes</td>\n",
              "      <td>72</td>\n",
              "      <td>Yes</td>\n",
              "      <td>Yes</td>\n",
              "      <td>Fiber optic</td>\n",
              "      <td>No</td>\n",
              "      <td>...</td>\n",
              "      <td>Yes</td>\n",
              "      <td>No</td>\n",
              "      <td>Yes</td>\n",
              "      <td>Yes</td>\n",
              "      <td>One year</td>\n",
              "      <td>Yes</td>\n",
              "      <td>Credit card (automatic)</td>\n",
              "      <td>103.20</td>\n",
              "      <td>7362.90</td>\n",
              "      <td>No</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7040</th>\n",
              "      <td>4801-JZAZL</td>\n",
              "      <td>Female</td>\n",
              "      <td>0</td>\n",
              "      <td>Yes</td>\n",
              "      <td>Yes</td>\n",
              "      <td>11</td>\n",
              "      <td>No</td>\n",
              "      <td>No phone service</td>\n",
              "      <td>DSL</td>\n",
              "      <td>Yes</td>\n",
              "      <td>...</td>\n",
              "      <td>No</td>\n",
              "      <td>No</td>\n",
              "      <td>No</td>\n",
              "      <td>No</td>\n",
              "      <td>Month-to-month</td>\n",
              "      <td>Yes</td>\n",
              "      <td>Electronic check</td>\n",
              "      <td>29.60</td>\n",
              "      <td>346.45</td>\n",
              "      <td>No</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7041</th>\n",
              "      <td>8361-LTMKD</td>\n",
              "      <td>Male</td>\n",
              "      <td>1</td>\n",
              "      <td>Yes</td>\n",
              "      <td>No</td>\n",
              "      <td>4</td>\n",
              "      <td>Yes</td>\n",
              "      <td>Yes</td>\n",
              "      <td>Fiber optic</td>\n",
              "      <td>No</td>\n",
              "      <td>...</td>\n",
              "      <td>No</td>\n",
              "      <td>No</td>\n",
              "      <td>No</td>\n",
              "      <td>No</td>\n",
              "      <td>Month-to-month</td>\n",
              "      <td>Yes</td>\n",
              "      <td>Mailed check</td>\n",
              "      <td>74.40</td>\n",
              "      <td>306.60</td>\n",
              "      <td>Yes</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7042</th>\n",
              "      <td>3186-AJIEK</td>\n",
              "      <td>Male</td>\n",
              "      <td>0</td>\n",
              "      <td>No</td>\n",
              "      <td>No</td>\n",
              "      <td>66</td>\n",
              "      <td>Yes</td>\n",
              "      <td>No</td>\n",
              "      <td>Fiber optic</td>\n",
              "      <td>Yes</td>\n",
              "      <td>...</td>\n",
              "      <td>Yes</td>\n",
              "      <td>Yes</td>\n",
              "      <td>Yes</td>\n",
              "      <td>Yes</td>\n",
              "      <td>Two year</td>\n",
              "      <td>Yes</td>\n",
              "      <td>Bank transfer (automatic)</td>\n",
              "      <td>105.65</td>\n",
              "      <td>6844.50</td>\n",
              "      <td>No</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>5 rows × 21 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-1ad4b3bc-0496-43c6-916c-63b78c09bcde')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-1ad4b3bc-0496-43c6-916c-63b78c09bcde button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-1ad4b3bc-0496-43c6-916c-63b78c09bcde');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-338c2316-790f-438c-9659-17a0016f4863\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-338c2316-790f-438c-9659-17a0016f4863')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-338c2316-790f-438c-9659-17a0016f4863 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe"
            }
          },
          "metadata": {},
          "execution_count": 4
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.shape"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "86m2rt8LuUFK",
        "outputId": "4717beae-e9e1-4cef-e5bd-d3981b5c645f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(7043, 21)"
            ]
          },
          "metadata": {},
          "execution_count": 5
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.info()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "3EXmgtqYuYbR",
        "outputId": "ec65c91b-c13b-4956-f04b-827b4659b995"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 7043 entries, 0 to 7042\n",
            "Data columns (total 21 columns):\n",
            " #   Column            Non-Null Count  Dtype  \n",
            "---  ------            --------------  -----  \n",
            " 0   customerID        7043 non-null   object \n",
            " 1   gender            7043 non-null   object \n",
            " 2   SeniorCitizen     7043 non-null   int64  \n",
            " 3   Partner           7043 non-null   object \n",
            " 4   Dependents        7043 non-null   object \n",
            " 5   tenure            7043 non-null   int64  \n",
            " 6   PhoneService      7043 non-null   object \n",
            " 7   MultipleLines     7043 non-null   object \n",
            " 8   InternetService   7043 non-null   object \n",
            " 9   OnlineSecurity    7043 non-null   object \n",
            " 10  OnlineBackup      7043 non-null   object \n",
            " 11  DeviceProtection  7043 non-null   object \n",
            " 12  TechSupport       7043 non-null   object \n",
            " 13  StreamingTV       7043 non-null   object \n",
            " 14  StreamingMovies   7043 non-null   object \n",
            " 15  Contract          7043 non-null   object \n",
            " 16  PaperlessBilling  7043 non-null   object \n",
            " 17  PaymentMethod     7043 non-null   object \n",
            " 18  MonthlyCharges    7043 non-null   float64\n",
            " 19  TotalCharges      7032 non-null   float64\n",
            " 20  Churn             7043 non-null   object \n",
            "dtypes: float64(2), int64(2), object(17)\n",
            "memory usage: 1.1+ MB\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.describe()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 300
        },
        "id": "pA9RQqrtul_h",
        "outputId": "d79564aa-9ce7-4bda-d5db-e31c879a448c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "       SeniorCitizen       tenure  MonthlyCharges  TotalCharges\n",
              "count    7043.000000  7043.000000     7043.000000   7032.000000\n",
              "mean        0.162147    32.371149       64.761692   2283.300441\n",
              "std         0.368612    24.559481       30.090047   2266.771362\n",
              "min         0.000000     0.000000       18.250000     18.800000\n",
              "25%         0.000000     9.000000       35.500000    401.450000\n",
              "50%         0.000000    29.000000       70.350000   1397.475000\n",
              "75%         0.000000    55.000000       89.850000   3794.737500\n",
              "max         1.000000    72.000000      118.750000   8684.800000"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-e9fa0b53-bb09-4879-b83f-a384ce11a38b\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>SeniorCitizen</th>\n",
              "      <th>tenure</th>\n",
              "      <th>MonthlyCharges</th>\n",
              "      <th>TotalCharges</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>7043.000000</td>\n",
              "      <td>7043.000000</td>\n",
              "      <td>7043.000000</td>\n",
              "      <td>7032.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>mean</th>\n",
              "      <td>0.162147</td>\n",
              "      <td>32.371149</td>\n",
              "      <td>64.761692</td>\n",
              "      <td>2283.300441</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>std</th>\n",
              "      <td>0.368612</td>\n",
              "      <td>24.559481</td>\n",
              "      <td>30.090047</td>\n",
              "      <td>2266.771362</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>min</th>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>18.250000</td>\n",
              "      <td>18.800000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25%</th>\n",
              "      <td>0.000000</td>\n",
              "      <td>9.000000</td>\n",
              "      <td>35.500000</td>\n",
              "      <td>401.450000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50%</th>\n",
              "      <td>0.000000</td>\n",
              "      <td>29.000000</td>\n",
              "      <td>70.350000</td>\n",
              "      <td>1397.475000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75%</th>\n",
              "      <td>0.000000</td>\n",
              "      <td>55.000000</td>\n",
              "      <td>89.850000</td>\n",
              "      <td>3794.737500</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>max</th>\n",
              "      <td>1.000000</td>\n",
              "      <td>72.000000</td>\n",
              "      <td>118.750000</td>\n",
              "      <td>8684.800000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-e9fa0b53-bb09-4879-b83f-a384ce11a38b')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-e9fa0b53-bb09-4879-b83f-a384ce11a38b button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-e9fa0b53-bb09-4879-b83f-a384ce11a38b');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-8372f782-cc8f-4789-b8cc-4f54f596b02b\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-8372f782-cc8f-4789-b8cc-4f54f596b02b')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-8372f782-cc8f-4789-b8cc-4f54f596b02b button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"df\",\n  \"rows\": 8,\n  \"fields\": [\n    {\n      \"column\": \"SeniorCitizen\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2489.9992387084,\n        \"min\": 0.0,\n        \"max\": 7043.0,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          0.1621468124378816,\n          1.0,\n          0.3686116056100131\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"tenure\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2478.9752758409018,\n        \"min\": 0.0,\n        \"max\": 7043.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          32.37114865824223,\n          29.0,\n          7043.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"MonthlyCharges\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2468.7047672837775,\n        \"min\": 18.25,\n        \"max\": 7043.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          64.76169246059918,\n          70.35,\n          7043.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"TotalCharges\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3117.312944742373,\n        \"min\": 18.8,\n        \"max\": 8684.8,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          2283.3004408418656,\n          1397.475,\n          7032.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 7
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "nulls_in_columns = df.isnull().sum()\n",
        "print(\"Null values in each column:\")\n",
        "print(nulls_in_columns)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "sZVCBlOduv1B",
        "outputId": "ed755084-0725-4a0e-d84a-fa5d37f4f1db"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Null values in each column:\n",
            "customerID           0\n",
            "gender               0\n",
            "SeniorCitizen        0\n",
            "Partner              0\n",
            "Dependents           0\n",
            "tenure               0\n",
            "PhoneService         0\n",
            "MultipleLines        0\n",
            "InternetService      0\n",
            "OnlineSecurity       0\n",
            "OnlineBackup         0\n",
            "DeviceProtection     0\n",
            "TechSupport          0\n",
            "StreamingTV          0\n",
            "StreamingMovies      0\n",
            "Contract             0\n",
            "PaperlessBilling     0\n",
            "PaymentMethod        0\n",
            "MonthlyCharges       0\n",
            "TotalCharges        11\n",
            "Churn                0\n",
            "dtype: int64\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "nulls_in_rows = df.isnull().sum(axis=1)\n",
        "print(\"Null values in each row:\")\n",
        "print(nulls_in_rows)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "OrT67zazwAF1",
        "outputId": "f19f9d5b-9304-4360-e758-e6c20aad2272"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Null values in each row:\n",
            "0       0\n",
            "1       0\n",
            "2       0\n",
            "3       0\n",
            "4       0\n",
            "       ..\n",
            "7038    0\n",
            "7039    0\n",
            "7040    0\n",
            "7041    0\n",
            "7042    0\n",
            "Length: 7043, dtype: int64\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "mean=df[\"TotalCharges\"].mean()\n",
        "df[\"TotalCharges\"].replace(np.NaN,mean,inplace=True)"
      ],
      "metadata": {
        "id": "1oP-2cYewN8H"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "nulls_in_columns = df.isnull().sum()\n",
        "print(\"Null values in each column:\")\n",
        "print(nulls_in_columns)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "2czcz8tgwxUc",
        "outputId": "6fd0bdb3-1f53-4aa2-9a2b-7135bb703f86"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Null values in each column:\n",
            "customerID          0\n",
            "gender              0\n",
            "SeniorCitizen       0\n",
            "Partner             0\n",
            "Dependents          0\n",
            "tenure              0\n",
            "PhoneService        0\n",
            "MultipleLines       0\n",
            "InternetService     0\n",
            "OnlineSecurity      0\n",
            "OnlineBackup        0\n",
            "DeviceProtection    0\n",
            "TechSupport         0\n",
            "StreamingTV         0\n",
            "StreamingMovies     0\n",
            "Contract            0\n",
            "PaperlessBilling    0\n",
            "PaymentMethod       0\n",
            "MonthlyCharges      0\n",
            "TotalCharges        0\n",
            "Churn               0\n",
            "dtype: int64\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "nulls_in_rows = df.isnull().sum(axis=1)\n",
        "print(\"Null values in each row:\")\n",
        "print(nulls_in_rows)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "jxKyPvFjxGAK",
        "outputId": "8040e5fd-dce8-4ec1-aa51-b1acc92b8600"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Null values in each row:\n",
            "0       0\n",
            "1       0\n",
            "2       0\n",
            "3       0\n",
            "4       0\n",
            "       ..\n",
            "7038    0\n",
            "7039    0\n",
            "7040    0\n",
            "7041    0\n",
            "7042    0\n",
            "Length: 7043, dtype: int64\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Categorical variable encoding\n",
        "categorical_columns = ['gender', 'Partner', 'Dependents', 'PhoneService', 'MultipleLines', 'InternetService',\n",
        "                       'OnlineSecurity', 'OnlineBackup', 'DeviceProtection', 'TechSupport', 'StreamingTV',\n",
        "                       'StreamingMovies', 'Contract', 'PaperlessBilling', 'PaymentMethod']\n",
        "\n",
        "df_encoded = pd.get_dummies(df, columns=categorical_columns)\n",
        "df_encoded"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 634
        },
        "id": "6KeeQLWExL3k",
        "outputId": "090d6b9b-7804-44d6-ff92-161705cedaa0"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "      customerID  SeniorCitizen  tenure  MonthlyCharges  TotalCharges Churn  \\\n",
              "0     7590-VHVEG              0       1           29.85         29.85    No   \n",
              "1     5575-GNVDE              0      34           56.95       1889.50    No   \n",
              "2     3668-QPYBK              0       2           53.85        108.15   Yes   \n",
              "3     7795-CFOCW              0      45           42.30       1840.75    No   \n",
              "4     9237-HQITU              0       2           70.70        151.65   Yes   \n",
              "...          ...            ...     ...             ...           ...   ...   \n",
              "7038  6840-RESVB              0      24           84.80       1990.50    No   \n",
              "7039  2234-XADUH              0      72          103.20       7362.90    No   \n",
              "7040  4801-JZAZL              0      11           29.60        346.45    No   \n",
              "7041  8361-LTMKD              1       4           74.40        306.60   Yes   \n",
              "7042  3186-AJIEK              0      66          105.65       6844.50    No   \n",
              "\n",
              "      gender_Female  gender_Male  Partner_No  Partner_Yes  ...  \\\n",
              "0              True        False       False         True  ...   \n",
              "1             False         True        True        False  ...   \n",
              "2             False         True        True        False  ...   \n",
              "3             False         True        True        False  ...   \n",
              "4              True        False        True        False  ...   \n",
              "...             ...          ...         ...          ...  ...   \n",
              "7038          False         True       False         True  ...   \n",
              "7039           True        False       False         True  ...   \n",
              "7040           True        False       False         True  ...   \n",
              "7041          False         True       False         True  ...   \n",
              "7042          False         True        True        False  ...   \n",
              "\n",
              "      StreamingMovies_Yes  Contract_Month-to-month  Contract_One year  \\\n",
              "0                   False                     True              False   \n",
              "1                   False                    False               True   \n",
              "2                   False                     True              False   \n",
              "3                   False                    False               True   \n",
              "4                   False                     True              False   \n",
              "...                   ...                      ...                ...   \n",
              "7038                 True                    False               True   \n",
              "7039                 True                    False               True   \n",
              "7040                False                     True              False   \n",
              "7041                False                     True              False   \n",
              "7042                 True                    False              False   \n",
              "\n",
              "      Contract_Two year  PaperlessBilling_No  PaperlessBilling_Yes  \\\n",
              "0                 False                False                  True   \n",
              "1                 False                 True                 False   \n",
              "2                 False                False                  True   \n",
              "3                 False                 True                 False   \n",
              "4                 False                False                  True   \n",
              "...                 ...                  ...                   ...   \n",
              "7038              False                False                  True   \n",
              "7039              False                False                  True   \n",
              "7040              False                False                  True   \n",
              "7041              False                False                  True   \n",
              "7042               True                False                  True   \n",
              "\n",
              "      PaymentMethod_Bank transfer (automatic)  \\\n",
              "0                                       False   \n",
              "1                                       False   \n",
              "2                                       False   \n",
              "3                                        True   \n",
              "4                                       False   \n",
              "...                                       ...   \n",
              "7038                                    False   \n",
              "7039                                    False   \n",
              "7040                                    False   \n",
              "7041                                    False   \n",
              "7042                                     True   \n",
              "\n",
              "      PaymentMethod_Credit card (automatic)  PaymentMethod_Electronic check  \\\n",
              "0                                     False                            True   \n",
              "1                                     False                           False   \n",
              "2                                     False                           False   \n",
              "3                                     False                           False   \n",
              "4                                     False                            True   \n",
              "...                                     ...                             ...   \n",
              "7038                                  False                           False   \n",
              "7039                                   True                           False   \n",
              "7040                                  False                            True   \n",
              "7041                                  False                           False   \n",
              "7042                                  False                           False   \n",
              "\n",
              "      PaymentMethod_Mailed check  \n",
              "0                          False  \n",
              "1                           True  \n",
              "2                           True  \n",
              "3                          False  \n",
              "4                          False  \n",
              "...                          ...  \n",
              "7038                        True  \n",
              "7039                       False  \n",
              "7040                       False  \n",
              "7041                        True  \n",
              "7042                       False  \n",
              "\n",
              "[7043 rows x 47 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-f14166da-dbc3-4664-bb94-3c5627242160\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>customerID</th>\n",
              "      <th>SeniorCitizen</th>\n",
              "      <th>tenure</th>\n",
              "      <th>MonthlyCharges</th>\n",
              "      <th>TotalCharges</th>\n",
              "      <th>Churn</th>\n",
              "      <th>gender_Female</th>\n",
              "      <th>gender_Male</th>\n",
              "      <th>Partner_No</th>\n",
              "      <th>Partner_Yes</th>\n",
              "      <th>...</th>\n",
              "      <th>StreamingMovies_Yes</th>\n",
              "      <th>Contract_Month-to-month</th>\n",
              "      <th>Contract_One year</th>\n",
              "      <th>Contract_Two year</th>\n",
              "      <th>PaperlessBilling_No</th>\n",
              "      <th>PaperlessBilling_Yes</th>\n",
              "      <th>PaymentMethod_Bank transfer (automatic)</th>\n",
              "      <th>PaymentMethod_Credit card (automatic)</th>\n",
              "      <th>PaymentMethod_Electronic check</th>\n",
              "      <th>PaymentMethod_Mailed check</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>7590-VHVEG</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>29.85</td>\n",
              "      <td>29.85</td>\n",
              "      <td>No</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "      <td>...</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>5575-GNVDE</td>\n",
              "      <td>0</td>\n",
              "      <td>34</td>\n",
              "      <td>56.95</td>\n",
              "      <td>1889.50</td>\n",
              "      <td>No</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>...</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>3668-QPYBK</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>53.85</td>\n",
              "      <td>108.15</td>\n",
              "      <td>Yes</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>...</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>7795-CFOCW</td>\n",
              "      <td>0</td>\n",
              "      <td>45</td>\n",
              "      <td>42.30</td>\n",
              "      <td>1840.75</td>\n",
              "      <td>No</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>...</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>9237-HQITU</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>70.70</td>\n",
              "      <td>151.65</td>\n",
              "      <td>Yes</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>...</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7038</th>\n",
              "      <td>6840-RESVB</td>\n",
              "      <td>0</td>\n",
              "      <td>24</td>\n",
              "      <td>84.80</td>\n",
              "      <td>1990.50</td>\n",
              "      <td>No</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "      <td>...</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7039</th>\n",
              "      <td>2234-XADUH</td>\n",
              "      <td>0</td>\n",
              "      <td>72</td>\n",
              "      <td>103.20</td>\n",
              "      <td>7362.90</td>\n",
              "      <td>No</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "      <td>...</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7040</th>\n",
              "      <td>4801-JZAZL</td>\n",
              "      <td>0</td>\n",
              "      <td>11</td>\n",
              "      <td>29.60</td>\n",
              "      <td>346.45</td>\n",
              "      <td>No</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "      <td>...</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7041</th>\n",
              "      <td>8361-LTMKD</td>\n",
              "      <td>1</td>\n",
              "      <td>4</td>\n",
              "      <td>74.40</td>\n",
              "      <td>306.60</td>\n",
              "      <td>Yes</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "      <td>...</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7042</th>\n",
              "      <td>3186-AJIEK</td>\n",
              "      <td>0</td>\n",
              "      <td>66</td>\n",
              "      <td>105.65</td>\n",
              "      <td>6844.50</td>\n",
              "      <td>No</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>...</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>7043 rows × 47 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-f14166da-dbc3-4664-bb94-3c5627242160')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-f14166da-dbc3-4664-bb94-3c5627242160 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-f14166da-dbc3-4664-bb94-3c5627242160');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-2f9e623f-791d-44af-a8b4-5a98ba22cf17\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-2f9e623f-791d-44af-a8b4-5a98ba22cf17')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-2f9e623f-791d-44af-a8b4-5a98ba22cf17 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_16cd58c2-3ad0-4808-a261-fa5cdcd6018a\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('df_encoded')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_16cd58c2-3ad0-4808-a261-fa5cdcd6018a button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('df_encoded');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df_encoded"
            }
          },
          "metadata": {},
          "execution_count": 13
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "for column in df.columns:\n",
        "  unique_values=df[column].unique()\n",
        "  print(f'uique value in {column}: ',unique_values)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ymqKeIVjl_eX",
        "outputId": "a7c4f5e0-e364-4358-a8f7-8126f77cb0c4"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "uique value in customerID:  ['7590-VHVEG' '5575-GNVDE' '3668-QPYBK' ... '4801-JZAZL' '8361-LTMKD'\n",
            " '3186-AJIEK']\n",
            "uique value in gender:  ['Female' 'Male']\n",
            "uique value in SeniorCitizen:  [0 1]\n",
            "uique value in Partner:  ['Yes' 'No']\n",
            "uique value in Dependents:  ['No' 'Yes']\n",
            "uique value in tenure:  [ 1 34  2 45  8 22 10 28 62 13 16 58 49 25 69 52 71 21 12 30 47 72 17 27\n",
            "  5 46 11 70 63 43 15 60 18 66  9  3 31 50 64 56  7 42 35 48 29 65 38 68\n",
            " 32 55 37 36 41  6  4 33 67 23 57 61 14 20 53 40 59 24 44 19 54 51 26  0\n",
            " 39]\n",
            "uique value in PhoneService:  ['No' 'Yes']\n",
            "uique value in MultipleLines:  ['No phone service' 'No' 'Yes']\n",
            "uique value in InternetService:  ['DSL' 'Fiber optic' 'No']\n",
            "uique value in OnlineSecurity:  ['No' 'Yes' 'No internet service']\n",
            "uique value in OnlineBackup:  ['Yes' 'No' 'No internet service']\n",
            "uique value in DeviceProtection:  ['No' 'Yes' 'No internet service']\n",
            "uique value in TechSupport:  ['No' 'Yes' 'No internet service']\n",
            "uique value in StreamingTV:  ['No' 'Yes' 'No internet service']\n",
            "uique value in StreamingMovies:  ['No' 'Yes' 'No internet service']\n",
            "uique value in Contract:  ['Month-to-month' 'One year' 'Two year']\n",
            "uique value in PaperlessBilling:  ['Yes' 'No']\n",
            "uique value in PaymentMethod:  ['Electronic check' 'Mailed check' 'Bank transfer (automatic)'\n",
            " 'Credit card (automatic)']\n",
            "uique value in MonthlyCharges:  [29.85 56.95 53.85 ... 63.1  44.2  78.7 ]\n",
            "uique value in TotalCharges:  [  29.85 1889.5   108.15 ...  346.45  306.6  6844.5 ]\n",
            "uique value in Churn:  [nan]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Dataset splitting.\n",
        "X = df_encoded.drop('Churn', axis=1)\n",
        "y = df_encoded['Churn']\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0)"
      ],
      "metadata": {
        "id": "V_v5DIWI2fgo"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "**TASK-2 , Exploratory Data Analysis (EDA)**"
      ],
      "metadata": {
        "id": "EKQ53qEK3mjy"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "df.columns"
      ],
      "metadata": {
        "id": "24YdWLNW3mAl",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "5e5b1662-1aa5-4b0f-9efe-aed5ec3eff7b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Index(['customerID', 'gender', 'SeniorCitizen', 'Partner', 'Dependents',\n",
              "       'tenure', 'PhoneService', 'MultipleLines', 'InternetService',\n",
              "       'OnlineSecurity', 'OnlineBackup', 'DeviceProtection', 'TechSupport',\n",
              "       'StreamingTV', 'StreamingMovies', 'Contract', 'PaperlessBilling',\n",
              "       'PaymentMethod', 'MonthlyCharges', 'TotalCharges', 'Churn'],\n",
              "      dtype='object')"
            ]
          },
          "metadata": {},
          "execution_count": 15
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "fig,ax=plt.subplots()\n",
        "sns.histplot(df['tenure'],kde=True)\n",
        "plt.title('distribution of tenure')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 489
        },
        "id": "2rmbvft7mE6X",
        "outputId": "857cfa88-236c-40cd-b360-0c154e273f84"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Text(0.5, 1.0, 'distribution of tenure')"
            ]
          },
          "metadata": {},
          "execution_count": 46
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "fig,axs=plt.subplots(1,2, figsize=(17,5))\n",
        "\n",
        "axs[0].hist(df['Contract'])\n",
        "axs[0].set_title('contract type distribution')\n",
        "\n",
        "axs[1].hist(df[\"PaymentMethod\"])\n",
        "axs[1].set_title('payment method distribution')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 384
        },
        "id": "B_TuJJLymJdA",
        "outputId": "bd866078-b746-4cb6-a821-c0532c7983a9"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Text(0.5, 1.0, 'payment method distribution')"
            ]
          },
          "metadata": {},
          "execution_count": 47
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1700x500 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "sns.countplot(x='Churn',data=df)\n",
        "plt.title('churn distribution')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 489
        },
        "id": "H1T5lOj1mNew",
        "outputId": "96c50cfa-1f08-4446-fe3b-c1c7db747cc0"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Text(0.5, 1.0, 'churn distribution')"
            ]
          },
          "metadata": {},
          "execution_count": 48
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "mean_monthly_charges = df_encoded.groupby('Churn')['MonthlyCharges'].mean()\n",
        "plt.figure(figsize=(8, 6))\n",
        "plt.bar(mean_monthly_charges.index, mean_monthly_charges.values, color=['green', 'red'])\n",
        "plt.xlabel('Churn Status')\n",
        "plt.ylabel('Mean Monthly Charges')\n",
        "plt.title('Mean Monthly Charges by Churn Status')\n",
        "plt.xticks(mean_monthly_charges.index, ['Not Churned', 'Churned'])\n",
        "plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 564
        },
        "id": "nZv_5gTju1g7",
        "outputId": "3aa7961d-3ed7-4c81-d885-8de178c7fdae"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "total_charges_by_churn = df_encoded.groupby('Churn')['TotalCharges'].mean()\n",
        "plt.figure(figsize=(8, 6))\n",
        "plt.bar(total_charges_by_churn.index, total_charges_by_churn.values, color=['green', 'red'])\n",
        "plt.xlabel('Churn Status')\n",
        "plt.ylabel('Total Charges')\n",
        "plt.title('Total Charges by Churn Status')\n",
        "plt.xticks(total_charges_by_churn.index, ['Not Churned', 'Churned'])\n",
        "plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 564
        },
        "id": "bKbRt9kxveW6",
        "outputId": "fb1d070d-9e11-4581-ad1a-0b4a847d95b9"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "plt.figure(figsize=(8, 6))\n",
        "sns.kdeplot(data=df_encoded, x='MonthlyCharges', hue='Churn', shade=True)\n",
        "plt.xlabel('Total Charges')\n",
        "plt.ylabel('Density')\n",
        "plt.title('Kernel Density Estimation of Total Charges by Churn Status')\n",
        "plt.legend(title='Churn Status', labels=['Not Churned', 'Churned'])\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 668
        },
        "id": "J1gUvpityBHy",
        "outputId": "2ef319c1-da3d-4c2c-e7d2-d0c325c420f6"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-18-32a9c35340a6>:2: FutureWarning: \n",
            "\n",
            "`shade` is now deprecated in favor of `fill`; setting `fill=True`.\n",
            "This will become an error in seaborn v0.14.0; please update your code.\n",
            "\n",
            "  sns.kdeplot(data=df_encoded, x='MonthlyCharges', hue='Churn', shade=True)\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "plt.figure(figsize=(8, 6))\n",
        "sns.kdeplot(data=df_encoded, x='TotalCharges', hue='Churn', shade=True)\n",
        "plt.xlabel('Total Charges')\n",
        "plt.ylabel('Density')\n",
        "plt.title('Kernel Density Estimation of Total Charges by Churn Status')\n",
        "plt.legend(title='Churn Status', labels=['Not Churned', 'Churned'])\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 668
        },
        "id": "EWSAss-LxdzR",
        "outputId": "ae043cab-d18d-43cb-e6f9-8967b3437f6c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-19-78ace9a4f6bc>:2: FutureWarning: \n",
            "\n",
            "`shade` is now deprecated in favor of `fill`; setting `fill=True`.\n",
            "This will become an error in seaborn v0.14.0; please update your code.\n",
            "\n",
            "  sns.kdeplot(data=df_encoded, x='TotalCharges', hue='Churn', shade=True)\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df_encoded['Churn_numeric'] = df_encoded['Churn'].map({'Yes': 1, 'No': 0})\n",
        "pearson_coef, p_value = pearsonr(df_encoded['TotalCharges'], df_encoded['Churn_numeric'])\n",
        "print(\"Pearson correlation coefficient:\", pearson_coef)\n",
        "print(\"P-value:\", p_value)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "GaoJYKq30dAR",
        "outputId": "47ad2f62-0af5-4f57-db7f-4f111f4a17cf"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Pearson correlation coefficient: -0.1994277150883139\n",
            "P-value: 4.233836384879152e-64\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df_encoded['Churn_numeric'] = df_encoded['Churn'].map({'Yes': 1, 'No': 0})\n",
        "pearson_coef, p_value = pearsonr(df_encoded['MonthlyCharges'], df_encoded['Churn_numeric'])\n",
        "print(\"Pearson correlation coefficient:\", pearson_coef)\n",
        "print(\"P-value:\", p_value)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "xBX7jx1c2ffK",
        "outputId": "f3b108e7-4851-4d3b-a881-1f72b7afd9af"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Pearson correlation coefficient: 0.19335642223784708\n",
            "P-value: 2.706645606888192e-60\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "for param in ['MonthlyCharges', 'TotalCharges']:\n",
        "    df_encoded['Churn_numeric'] = df_encoded['Churn'].map({'Yes': 1, 'No': 0})\n",
        "    print(f'Correlation of Churn and {param}:')\n",
        "    print(df_encoded[[param, 'Churn_numeric']].corr())\n",
        "    df_encoded.drop(columns=['Churn_numeric'], inplace=True)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "FdVFKu3T34OL",
        "outputId": "d26909ac-c736-4e18-8e56-870e577297bc"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Correlation of Churn and MonthlyCharges:\n",
            "                MonthlyCharges  Churn_numeric\n",
            "MonthlyCharges        1.000000       0.193356\n",
            "Churn_numeric         0.193356       1.000000\n",
            "Correlation of Churn and TotalCharges:\n",
            "               TotalCharges  Churn_numeric\n",
            "TotalCharges       1.000000      -0.199428\n",
            "Churn_numeric     -0.199428       1.000000\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "for param in ['MonthlyCharges', 'TotalCharges']:\n",
        "    df_encoded['Churn_numeric'] = df_encoded['Churn'].map({'Yes': 1, 'No': 0})\n",
        "    correlation = df_encoded['Churn_numeric'].corr(df_encoded[param])\n",
        "    print(f'Correlation of Churn and {param}: {correlation}')\n",
        "    df_encoded.drop(columns=['Churn_numeric'], inplace=True)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "zgEpjJbX4GUj",
        "outputId": "0b017c9f-1f7f-4d03-aca7-bff34a518789"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Correlation of Churn and MonthlyCharges: 0.19335642223784694\n",
            "Correlation of Churn and TotalCharges: -0.19942771508831394\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df_encoded['Churn'] = df_encoded['Churn'].map({'Yes': 1, 'No': 0})\n",
        "num_churned_customers = df_encoded['Churn'].sum()\n",
        "total_customers = len(df_encoded)\n",
        "churn_rate = (num_churned_customers / total_customers) * 100\n",
        "print(\"Churn Rate:\", churn_rate)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "OD-roOMm6pgT",
        "outputId": "df56600f-222f-494d-a59f-d19c49a690f5"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Churn Rate: 26.536987079369588\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Customer Segmentation**\n",
        "\n"
      ],
      "metadata": {
        "id": "8cWDL_ii7Qxb"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "df.columns"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "2IjWbm18Bxgs",
        "outputId": "b64bd20b-19d0-4f72-b817-61b7e8271443"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Index(['customerID', 'gender', 'SeniorCitizen', 'Partner', 'Dependents',\n",
              "       'tenure', 'PhoneService', 'MultipleLines', 'InternetService',\n",
              "       'OnlineSecurity', 'OnlineBackup', 'DeviceProtection', 'TechSupport',\n",
              "       'StreamingTV', 'StreamingMovies', 'Contract', 'PaperlessBilling',\n",
              "       'PaymentMethod', 'MonthlyCharges', 'TotalCharges', 'Churn'],\n",
              "      dtype='object')"
            ]
          },
          "metadata": {},
          "execution_count": 25
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df_encoded.head(2)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 231
        },
        "id": "zHaBzJ8jCDHX",
        "outputId": "fbd4d0c9-d50b-45fb-c806-29bf0e7720b9"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   customerID  SeniorCitizen  tenure  MonthlyCharges  TotalCharges  Churn  \\\n",
              "0  7590-VHVEG              0       1           29.85         29.85      0   \n",
              "1  5575-GNVDE              0      34           56.95       1889.50      0   \n",
              "\n",
              "   gender_Female  gender_Male  Partner_No  Partner_Yes  ...  \\\n",
              "0           True        False       False         True  ...   \n",
              "1          False         True        True        False  ...   \n",
              "\n",
              "   StreamingMovies_Yes  Contract_Month-to-month  Contract_One year  \\\n",
              "0                False                     True              False   \n",
              "1                False                    False               True   \n",
              "\n",
              "   Contract_Two year  PaperlessBilling_No  PaperlessBilling_Yes  \\\n",
              "0              False                False                  True   \n",
              "1              False                 True                 False   \n",
              "\n",
              "   PaymentMethod_Bank transfer (automatic)  \\\n",
              "0                                    False   \n",
              "1                                    False   \n",
              "\n",
              "   PaymentMethod_Credit card (automatic)  PaymentMethod_Electronic check  \\\n",
              "0                                  False                            True   \n",
              "1                                  False                           False   \n",
              "\n",
              "   PaymentMethod_Mailed check  \n",
              "0                       False  \n",
              "1                        True  \n",
              "\n",
              "[2 rows x 47 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-e2a16b7b-4b19-4dde-9efd-17703d7f7747\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>customerID</th>\n",
              "      <th>SeniorCitizen</th>\n",
              "      <th>tenure</th>\n",
              "      <th>MonthlyCharges</th>\n",
              "      <th>TotalCharges</th>\n",
              "      <th>Churn</th>\n",
              "      <th>gender_Female</th>\n",
              "      <th>gender_Male</th>\n",
              "      <th>Partner_No</th>\n",
              "      <th>Partner_Yes</th>\n",
              "      <th>...</th>\n",
              "      <th>StreamingMovies_Yes</th>\n",
              "      <th>Contract_Month-to-month</th>\n",
              "      <th>Contract_One year</th>\n",
              "      <th>Contract_Two year</th>\n",
              "      <th>PaperlessBilling_No</th>\n",
              "      <th>PaperlessBilling_Yes</th>\n",
              "      <th>PaymentMethod_Bank transfer (automatic)</th>\n",
              "      <th>PaymentMethod_Credit card (automatic)</th>\n",
              "      <th>PaymentMethod_Electronic check</th>\n",
              "      <th>PaymentMethod_Mailed check</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>7590-VHVEG</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>29.85</td>\n",
              "      <td>29.85</td>\n",
              "      <td>0</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "      <td>...</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>5575-GNVDE</td>\n",
              "      <td>0</td>\n",
              "      <td>34</td>\n",
              "      <td>56.95</td>\n",
              "      <td>1889.50</td>\n",
              "      <td>0</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>...</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>2 rows × 47 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-e2a16b7b-4b19-4dde-9efd-17703d7f7747')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-e2a16b7b-4b19-4dde-9efd-17703d7f7747 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-e2a16b7b-4b19-4dde-9efd-17703d7f7747');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-8a0c22ee-0240-4942-9694-bf52711dcd5c\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-8a0c22ee-0240-4942-9694-bf52711dcd5c')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-8a0c22ee-0240-4942-9694-bf52711dcd5c button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df_encoded"
            }
          },
          "metadata": {},
          "execution_count": 26
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.head(2)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 196
        },
        "id": "0KaTAwpgCnS7",
        "outputId": "499c322b-a6ed-40bc-dd91-4a4c09b92b44"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   customerID  gender  SeniorCitizen Partner Dependents  tenure PhoneService  \\\n",
              "0  7590-VHVEG  Female              0     Yes         No       1           No   \n",
              "1  5575-GNVDE    Male              0      No         No      34          Yes   \n",
              "\n",
              "      MultipleLines InternetService OnlineSecurity  ... DeviceProtection  \\\n",
              "0  No phone service             DSL             No  ...               No   \n",
              "1                No             DSL            Yes  ...              Yes   \n",
              "\n",
              "  TechSupport StreamingTV StreamingMovies        Contract PaperlessBilling  \\\n",
              "0          No          No              No  Month-to-month              Yes   \n",
              "1          No          No              No        One year               No   \n",
              "\n",
              "      PaymentMethod MonthlyCharges  TotalCharges  Churn  \n",
              "0  Electronic check          29.85         29.85     No  \n",
              "1      Mailed check          56.95       1889.50     No  \n",
              "\n",
              "[2 rows x 21 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-49b68d35-7730-46ae-ac02-60343b8e0592\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>customerID</th>\n",
              "      <th>gender</th>\n",
              "      <th>SeniorCitizen</th>\n",
              "      <th>Partner</th>\n",
              "      <th>Dependents</th>\n",
              "      <th>tenure</th>\n",
              "      <th>PhoneService</th>\n",
              "      <th>MultipleLines</th>\n",
              "      <th>InternetService</th>\n",
              "      <th>OnlineSecurity</th>\n",
              "      <th>...</th>\n",
              "      <th>DeviceProtection</th>\n",
              "      <th>TechSupport</th>\n",
              "      <th>StreamingTV</th>\n",
              "      <th>StreamingMovies</th>\n",
              "      <th>Contract</th>\n",
              "      <th>PaperlessBilling</th>\n",
              "      <th>PaymentMethod</th>\n",
              "      <th>MonthlyCharges</th>\n",
              "      <th>TotalCharges</th>\n",
              "      <th>Churn</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>7590-VHVEG</td>\n",
              "      <td>Female</td>\n",
              "      <td>0</td>\n",
              "      <td>Yes</td>\n",
              "      <td>No</td>\n",
              "      <td>1</td>\n",
              "      <td>No</td>\n",
              "      <td>No phone service</td>\n",
              "      <td>DSL</td>\n",
              "      <td>No</td>\n",
              "      <td>...</td>\n",
              "      <td>No</td>\n",
              "      <td>No</td>\n",
              "      <td>No</td>\n",
              "      <td>No</td>\n",
              "      <td>Month-to-month</td>\n",
              "      <td>Yes</td>\n",
              "      <td>Electronic check</td>\n",
              "      <td>29.85</td>\n",
              "      <td>29.85</td>\n",
              "      <td>No</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>5575-GNVDE</td>\n",
              "      <td>Male</td>\n",
              "      <td>0</td>\n",
              "      <td>No</td>\n",
              "      <td>No</td>\n",
              "      <td>34</td>\n",
              "      <td>Yes</td>\n",
              "      <td>No</td>\n",
              "      <td>DSL</td>\n",
              "      <td>Yes</td>\n",
              "      <td>...</td>\n",
              "      <td>Yes</td>\n",
              "      <td>No</td>\n",
              "      <td>No</td>\n",
              "      <td>No</td>\n",
              "      <td>One year</td>\n",
              "      <td>No</td>\n",
              "      <td>Mailed check</td>\n",
              "      <td>56.95</td>\n",
              "      <td>1889.50</td>\n",
              "      <td>No</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>2 rows × 21 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-49b68d35-7730-46ae-ac02-60343b8e0592')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-49b68d35-7730-46ae-ac02-60343b8e0592 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-49b68d35-7730-46ae-ac02-60343b8e0592');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-b8e32d8c-b4b3-4f59-bfff-e161ea1cf210\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-b8e32d8c-b4b3-4f59-bfff-e161ea1cf210')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-b8e32d8c-b4b3-4f59-bfff-e161ea1cf210 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df"
            }
          },
          "metadata": {},
          "execution_count": 27
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df[\"Churn_Yes_Num\"]=df[\"Churn\"].map({\"Yes\":1,\"No\":0})\n",
        "df"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 617
        },
        "id": "PD409uoSmauT",
        "outputId": "0733cb19-67a3-49d9-bbc8-d251ff975302"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "      customerID  gender  SeniorCitizen Partner Dependents  tenure  \\\n",
              "0     7590-VHVEG  Female              0     Yes         No       1   \n",
              "1     5575-GNVDE    Male              0      No         No      34   \n",
              "2     3668-QPYBK    Male              0      No         No       2   \n",
              "3     7795-CFOCW    Male              0      No         No      45   \n",
              "4     9237-HQITU  Female              0      No         No       2   \n",
              "...          ...     ...            ...     ...        ...     ...   \n",
              "7038  6840-RESVB    Male              0     Yes        Yes      24   \n",
              "7039  2234-XADUH  Female              0     Yes        Yes      72   \n",
              "7040  4801-JZAZL  Female              0     Yes        Yes      11   \n",
              "7041  8361-LTMKD    Male              1     Yes         No       4   \n",
              "7042  3186-AJIEK    Male              0      No         No      66   \n",
              "\n",
              "     PhoneService     MultipleLines InternetService OnlineSecurity  ...  \\\n",
              "0              No  No phone service             DSL             No  ...   \n",
              "1             Yes                No             DSL            Yes  ...   \n",
              "2             Yes                No             DSL            Yes  ...   \n",
              "3              No  No phone service             DSL            Yes  ...   \n",
              "4             Yes                No     Fiber optic             No  ...   \n",
              "...           ...               ...             ...            ...  ...   \n",
              "7038          Yes               Yes             DSL            Yes  ...   \n",
              "7039          Yes               Yes     Fiber optic             No  ...   \n",
              "7040           No  No phone service             DSL            Yes  ...   \n",
              "7041          Yes               Yes     Fiber optic             No  ...   \n",
              "7042          Yes                No     Fiber optic            Yes  ...   \n",
              "\n",
              "     TechSupport StreamingTV StreamingMovies        Contract PaperlessBilling  \\\n",
              "0             No          No              No  Month-to-month              Yes   \n",
              "1             No          No              No        One year               No   \n",
              "2             No          No              No  Month-to-month              Yes   \n",
              "3            Yes          No              No        One year               No   \n",
              "4             No          No              No  Month-to-month              Yes   \n",
              "...          ...         ...             ...             ...              ...   \n",
              "7038         Yes         Yes             Yes        One year              Yes   \n",
              "7039          No         Yes             Yes        One year              Yes   \n",
              "7040          No          No              No  Month-to-month              Yes   \n",
              "7041          No          No              No  Month-to-month              Yes   \n",
              "7042         Yes         Yes             Yes        Two year              Yes   \n",
              "\n",
              "                  PaymentMethod MonthlyCharges TotalCharges  Churn  \\\n",
              "0              Electronic check          29.85        29.85    NaN   \n",
              "1                  Mailed check          56.95      1889.50    NaN   \n",
              "2                  Mailed check          53.85       108.15    NaN   \n",
              "3     Bank transfer (automatic)          42.30      1840.75    NaN   \n",
              "4              Electronic check          70.70       151.65    NaN   \n",
              "...                         ...            ...          ...    ...   \n",
              "7038               Mailed check          84.80      1990.50    NaN   \n",
              "7039    Credit card (automatic)         103.20      7362.90    NaN   \n",
              "7040           Electronic check          29.60       346.45    NaN   \n",
              "7041               Mailed check          74.40       306.60    NaN   \n",
              "7042  Bank transfer (automatic)         105.65      6844.50    NaN   \n",
              "\n",
              "      Churn_Yes_Num  \n",
              "0               NaN  \n",
              "1               NaN  \n",
              "2               NaN  \n",
              "3               NaN  \n",
              "4               NaN  \n",
              "...             ...  \n",
              "7038            NaN  \n",
              "7039            NaN  \n",
              "7040            NaN  \n",
              "7041            NaN  \n",
              "7042            NaN  \n",
              "\n",
              "[7043 rows x 22 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-ef1777f3-d819-4d2e-a8ea-eb0588cc41f3\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>customerID</th>\n",
              "      <th>gender</th>\n",
              "      <th>SeniorCitizen</th>\n",
              "      <th>Partner</th>\n",
              "      <th>Dependents</th>\n",
              "      <th>tenure</th>\n",
              "      <th>PhoneService</th>\n",
              "      <th>MultipleLines</th>\n",
              "      <th>InternetService</th>\n",
              "      <th>OnlineSecurity</th>\n",
              "      <th>...</th>\n",
              "      <th>TechSupport</th>\n",
              "      <th>StreamingTV</th>\n",
              "      <th>StreamingMovies</th>\n",
              "      <th>Contract</th>\n",
              "      <th>PaperlessBilling</th>\n",
              "      <th>PaymentMethod</th>\n",
              "      <th>MonthlyCharges</th>\n",
              "      <th>TotalCharges</th>\n",
              "      <th>Churn</th>\n",
              "      <th>Churn_Yes_Num</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>7590-VHVEG</td>\n",
              "      <td>Female</td>\n",
              "      <td>0</td>\n",
              "      <td>Yes</td>\n",
              "      <td>No</td>\n",
              "      <td>1</td>\n",
              "      <td>No</td>\n",
              "      <td>No phone service</td>\n",
              "      <td>DSL</td>\n",
              "      <td>No</td>\n",
              "      <td>...</td>\n",
              "      <td>No</td>\n",
              "      <td>No</td>\n",
              "      <td>No</td>\n",
              "      <td>Month-to-month</td>\n",
              "      <td>Yes</td>\n",
              "      <td>Electronic check</td>\n",
              "      <td>29.85</td>\n",
              "      <td>29.85</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>5575-GNVDE</td>\n",
              "      <td>Male</td>\n",
              "      <td>0</td>\n",
              "      <td>No</td>\n",
              "      <td>No</td>\n",
              "      <td>34</td>\n",
              "      <td>Yes</td>\n",
              "      <td>No</td>\n",
              "      <td>DSL</td>\n",
              "      <td>Yes</td>\n",
              "      <td>...</td>\n",
              "      <td>No</td>\n",
              "      <td>No</td>\n",
              "      <td>No</td>\n",
              "      <td>One year</td>\n",
              "      <td>No</td>\n",
              "      <td>Mailed check</td>\n",
              "      <td>56.95</td>\n",
              "      <td>1889.50</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>3668-QPYBK</td>\n",
              "      <td>Male</td>\n",
              "      <td>0</td>\n",
              "      <td>No</td>\n",
              "      <td>No</td>\n",
              "      <td>2</td>\n",
              "      <td>Yes</td>\n",
              "      <td>No</td>\n",
              "      <td>DSL</td>\n",
              "      <td>Yes</td>\n",
              "      <td>...</td>\n",
              "      <td>No</td>\n",
              "      <td>No</td>\n",
              "      <td>No</td>\n",
              "      <td>Month-to-month</td>\n",
              "      <td>Yes</td>\n",
              "      <td>Mailed check</td>\n",
              "      <td>53.85</td>\n",
              "      <td>108.15</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>7795-CFOCW</td>\n",
              "      <td>Male</td>\n",
              "      <td>0</td>\n",
              "      <td>No</td>\n",
              "      <td>No</td>\n",
              "      <td>45</td>\n",
              "      <td>No</td>\n",
              "      <td>No phone service</td>\n",
              "      <td>DSL</td>\n",
              "      <td>Yes</td>\n",
              "      <td>...</td>\n",
              "      <td>Yes</td>\n",
              "      <td>No</td>\n",
              "      <td>No</td>\n",
              "      <td>One year</td>\n",
              "      <td>No</td>\n",
              "      <td>Bank transfer (automatic)</td>\n",
              "      <td>42.30</td>\n",
              "      <td>1840.75</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>9237-HQITU</td>\n",
              "      <td>Female</td>\n",
              "      <td>0</td>\n",
              "      <td>No</td>\n",
              "      <td>No</td>\n",
              "      <td>2</td>\n",
              "      <td>Yes</td>\n",
              "      <td>No</td>\n",
              "      <td>Fiber optic</td>\n",
              "      <td>No</td>\n",
              "      <td>...</td>\n",
              "      <td>No</td>\n",
              "      <td>No</td>\n",
              "      <td>No</td>\n",
              "      <td>Month-to-month</td>\n",
              "      <td>Yes</td>\n",
              "      <td>Electronic check</td>\n",
              "      <td>70.70</td>\n",
              "      <td>151.65</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7038</th>\n",
              "      <td>6840-RESVB</td>\n",
              "      <td>Male</td>\n",
              "      <td>0</td>\n",
              "      <td>Yes</td>\n",
              "      <td>Yes</td>\n",
              "      <td>24</td>\n",
              "      <td>Yes</td>\n",
              "      <td>Yes</td>\n",
              "      <td>DSL</td>\n",
              "      <td>Yes</td>\n",
              "      <td>...</td>\n",
              "      <td>Yes</td>\n",
              "      <td>Yes</td>\n",
              "      <td>Yes</td>\n",
              "      <td>One year</td>\n",
              "      <td>Yes</td>\n",
              "      <td>Mailed check</td>\n",
              "      <td>84.80</td>\n",
              "      <td>1990.50</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7039</th>\n",
              "      <td>2234-XADUH</td>\n",
              "      <td>Female</td>\n",
              "      <td>0</td>\n",
              "      <td>Yes</td>\n",
              "      <td>Yes</td>\n",
              "      <td>72</td>\n",
              "      <td>Yes</td>\n",
              "      <td>Yes</td>\n",
              "      <td>Fiber optic</td>\n",
              "      <td>No</td>\n",
              "      <td>...</td>\n",
              "      <td>No</td>\n",
              "      <td>Yes</td>\n",
              "      <td>Yes</td>\n",
              "      <td>One year</td>\n",
              "      <td>Yes</td>\n",
              "      <td>Credit card (automatic)</td>\n",
              "      <td>103.20</td>\n",
              "      <td>7362.90</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7040</th>\n",
              "      <td>4801-JZAZL</td>\n",
              "      <td>Female</td>\n",
              "      <td>0</td>\n",
              "      <td>Yes</td>\n",
              "      <td>Yes</td>\n",
              "      <td>11</td>\n",
              "      <td>No</td>\n",
              "      <td>No phone service</td>\n",
              "      <td>DSL</td>\n",
              "      <td>Yes</td>\n",
              "      <td>...</td>\n",
              "      <td>No</td>\n",
              "      <td>No</td>\n",
              "      <td>No</td>\n",
              "      <td>Month-to-month</td>\n",
              "      <td>Yes</td>\n",
              "      <td>Electronic check</td>\n",
              "      <td>29.60</td>\n",
              "      <td>346.45</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7041</th>\n",
              "      <td>8361-LTMKD</td>\n",
              "      <td>Male</td>\n",
              "      <td>1</td>\n",
              "      <td>Yes</td>\n",
              "      <td>No</td>\n",
              "      <td>4</td>\n",
              "      <td>Yes</td>\n",
              "      <td>Yes</td>\n",
              "      <td>Fiber optic</td>\n",
              "      <td>No</td>\n",
              "      <td>...</td>\n",
              "      <td>No</td>\n",
              "      <td>No</td>\n",
              "      <td>No</td>\n",
              "      <td>Month-to-month</td>\n",
              "      <td>Yes</td>\n",
              "      <td>Mailed check</td>\n",
              "      <td>74.40</td>\n",
              "      <td>306.60</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7042</th>\n",
              "      <td>3186-AJIEK</td>\n",
              "      <td>Male</td>\n",
              "      <td>0</td>\n",
              "      <td>No</td>\n",
              "      <td>No</td>\n",
              "      <td>66</td>\n",
              "      <td>Yes</td>\n",
              "      <td>No</td>\n",
              "      <td>Fiber optic</td>\n",
              "      <td>Yes</td>\n",
              "      <td>...</td>\n",
              "      <td>Yes</td>\n",
              "      <td>Yes</td>\n",
              "      <td>Yes</td>\n",
              "      <td>Two year</td>\n",
              "      <td>Yes</td>\n",
              "      <td>Bank transfer (automatic)</td>\n",
              "      <td>105.65</td>\n",
              "      <td>6844.50</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>7043 rows × 22 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-ef1777f3-d819-4d2e-a8ea-eb0588cc41f3')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-ef1777f3-d819-4d2e-a8ea-eb0588cc41f3 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-ef1777f3-d819-4d2e-a8ea-eb0588cc41f3');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-f640a770-a762-44c3-9906-c553bee4971c\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-f640a770-a762-44c3-9906-c553bee4971c')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-f640a770-a762-44c3-9906-c553bee4971c button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_041363a7-10f3-4734-bfbb-5ab08e5a35e2\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('df')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_041363a7-10f3-4734-bfbb-5ab08e5a35e2 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('df');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df"
            }
          },
          "metadata": {},
          "execution_count": 50
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "sum_variable=df[\"Churn_Yes_Num\"].sum()\n",
        "sum_variable"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "E98K0nATmUL6",
        "outputId": "44d5791c-73a5-4799-ddc3-0f19618e6ff8"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.0"
            ]
          },
          "metadata": {},
          "execution_count": 51
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "def segment_tenure(tenure):\n",
        "  if tenure < 1:\n",
        "    return \"new costumer\"\n",
        "  elif tenure>=1 and tenure<=1:\n",
        "    return \"mid term customer\"\n",
        "  else:\n",
        "    return \"long term costumer\"\n",
        "\n",
        "df[\"tenure_segment\"]=df['tenure'].apply(segment_tenure)\n",
        "\n",
        "def segment_charges(charges):\n",
        "  if charges < 50:\n",
        "    return \"low charge\"\n",
        "  elif charges>=50 and charges<=100:\n",
        "    return \"mid charge\"\n",
        "  else:\n",
        "    return \"high charge\"\n",
        "\n",
        "df[\"charges_segment\"]=df['MonthlyCharges'].apply(segment_charges)\n",
        "\n",
        "\n",
        "def segment_contract_type(contract_type):\n",
        "  if contract_type == 'Month-to-Month':\n",
        "    return \"month to month contract\"\n",
        "  elif contract_type == 'One year':\n",
        "    return \"one year contract\"\n",
        "  else:\n",
        "    return \"two year contract\"\n",
        "\n",
        "df[\"contract_segment\"]=df['Contract'].apply(segment_contract_type)\n",
        "\n",
        "df[[\"tenure_segment\",\"charges_segment\",\"contract_segment\"]]\n",
        "df\n",
        "\n",
        "\n",
        "\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 617
        },
        "id": "af2j4XOVmiZ4",
        "outputId": "d3035823-c409-4d27-edd4-60d7084531a9"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "      customerID  gender  SeniorCitizen Partner Dependents  tenure  \\\n",
              "0     7590-VHVEG  Female              0     Yes         No       1   \n",
              "1     5575-GNVDE    Male              0      No         No      34   \n",
              "2     3668-QPYBK    Male              0      No         No       2   \n",
              "3     7795-CFOCW    Male              0      No         No      45   \n",
              "4     9237-HQITU  Female              0      No         No       2   \n",
              "...          ...     ...            ...     ...        ...     ...   \n",
              "7038  6840-RESVB    Male              0     Yes        Yes      24   \n",
              "7039  2234-XADUH  Female              0     Yes        Yes      72   \n",
              "7040  4801-JZAZL  Female              0     Yes        Yes      11   \n",
              "7041  8361-LTMKD    Male              1     Yes         No       4   \n",
              "7042  3186-AJIEK    Male              0      No         No      66   \n",
              "\n",
              "     PhoneService     MultipleLines InternetService OnlineSecurity  ...  \\\n",
              "0              No  No phone service             DSL             No  ...   \n",
              "1             Yes                No             DSL            Yes  ...   \n",
              "2             Yes                No             DSL            Yes  ...   \n",
              "3              No  No phone service             DSL            Yes  ...   \n",
              "4             Yes                No     Fiber optic             No  ...   \n",
              "...           ...               ...             ...            ...  ...   \n",
              "7038          Yes               Yes             DSL            Yes  ...   \n",
              "7039          Yes               Yes     Fiber optic             No  ...   \n",
              "7040           No  No phone service             DSL            Yes  ...   \n",
              "7041          Yes               Yes     Fiber optic             No  ...   \n",
              "7042          Yes                No     Fiber optic            Yes  ...   \n",
              "\n",
              "            Contract PaperlessBilling              PaymentMethod  \\\n",
              "0     Month-to-month              Yes           Electronic check   \n",
              "1           One year               No               Mailed check   \n",
              "2     Month-to-month              Yes               Mailed check   \n",
              "3           One year               No  Bank transfer (automatic)   \n",
              "4     Month-to-month              Yes           Electronic check   \n",
              "...              ...              ...                        ...   \n",
              "7038        One year              Yes               Mailed check   \n",
              "7039        One year              Yes    Credit card (automatic)   \n",
              "7040  Month-to-month              Yes           Electronic check   \n",
              "7041  Month-to-month              Yes               Mailed check   \n",
              "7042        Two year              Yes  Bank transfer (automatic)   \n",
              "\n",
              "     MonthlyCharges TotalCharges Churn Churn_Yes_Num      tenure_segment  \\\n",
              "0             29.85        29.85   NaN           NaN   mid term customer   \n",
              "1             56.95      1889.50   NaN           NaN  long term costumer   \n",
              "2             53.85       108.15   NaN           NaN  long term costumer   \n",
              "3             42.30      1840.75   NaN           NaN  long term costumer   \n",
              "4             70.70       151.65   NaN           NaN  long term costumer   \n",
              "...             ...          ...   ...           ...                 ...   \n",
              "7038          84.80      1990.50   NaN           NaN  long term costumer   \n",
              "7039         103.20      7362.90   NaN           NaN  long term costumer   \n",
              "7040          29.60       346.45   NaN           NaN  long term costumer   \n",
              "7041          74.40       306.60   NaN           NaN  long term costumer   \n",
              "7042         105.65      6844.50   NaN           NaN  long term costumer   \n",
              "\n",
              "      charges_segment   contract_segment  \n",
              "0          low charge  two year contract  \n",
              "1          mid charge  one year contract  \n",
              "2          mid charge  two year contract  \n",
              "3          low charge  one year contract  \n",
              "4          mid charge  two year contract  \n",
              "...               ...                ...  \n",
              "7038       mid charge  one year contract  \n",
              "7039      high charge  one year contract  \n",
              "7040       low charge  two year contract  \n",
              "7041       mid charge  two year contract  \n",
              "7042      high charge  two year contract  \n",
              "\n",
              "[7043 rows x 25 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-7554f7c2-26a3-48a3-86f7-50f34db3b318\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>customerID</th>\n",
              "      <th>gender</th>\n",
              "      <th>SeniorCitizen</th>\n",
              "      <th>Partner</th>\n",
              "      <th>Dependents</th>\n",
              "      <th>tenure</th>\n",
              "      <th>PhoneService</th>\n",
              "      <th>MultipleLines</th>\n",
              "      <th>InternetService</th>\n",
              "      <th>OnlineSecurity</th>\n",
              "      <th>...</th>\n",
              "      <th>Contract</th>\n",
              "      <th>PaperlessBilling</th>\n",
              "      <th>PaymentMethod</th>\n",
              "      <th>MonthlyCharges</th>\n",
              "      <th>TotalCharges</th>\n",
              "      <th>Churn</th>\n",
              "      <th>Churn_Yes_Num</th>\n",
              "      <th>tenure_segment</th>\n",
              "      <th>charges_segment</th>\n",
              "      <th>contract_segment</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>7590-VHVEG</td>\n",
              "      <td>Female</td>\n",
              "      <td>0</td>\n",
              "      <td>Yes</td>\n",
              "      <td>No</td>\n",
              "      <td>1</td>\n",
              "      <td>No</td>\n",
              "      <td>No phone service</td>\n",
              "      <td>DSL</td>\n",
              "      <td>No</td>\n",
              "      <td>...</td>\n",
              "      <td>Month-to-month</td>\n",
              "      <td>Yes</td>\n",
              "      <td>Electronic check</td>\n",
              "      <td>29.85</td>\n",
              "      <td>29.85</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>mid term customer</td>\n",
              "      <td>low charge</td>\n",
              "      <td>two year contract</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>5575-GNVDE</td>\n",
              "      <td>Male</td>\n",
              "      <td>0</td>\n",
              "      <td>No</td>\n",
              "      <td>No</td>\n",
              "      <td>34</td>\n",
              "      <td>Yes</td>\n",
              "      <td>No</td>\n",
              "      <td>DSL</td>\n",
              "      <td>Yes</td>\n",
              "      <td>...</td>\n",
              "      <td>One year</td>\n",
              "      <td>No</td>\n",
              "      <td>Mailed check</td>\n",
              "      <td>56.95</td>\n",
              "      <td>1889.50</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>long term costumer</td>\n",
              "      <td>mid charge</td>\n",
              "      <td>one year contract</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>3668-QPYBK</td>\n",
              "      <td>Male</td>\n",
              "      <td>0</td>\n",
              "      <td>No</td>\n",
              "      <td>No</td>\n",
              "      <td>2</td>\n",
              "      <td>Yes</td>\n",
              "      <td>No</td>\n",
              "      <td>DSL</td>\n",
              "      <td>Yes</td>\n",
              "      <td>...</td>\n",
              "      <td>Month-to-month</td>\n",
              "      <td>Yes</td>\n",
              "      <td>Mailed check</td>\n",
              "      <td>53.85</td>\n",
              "      <td>108.15</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>long term costumer</td>\n",
              "      <td>mid charge</td>\n",
              "      <td>two year contract</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>7795-CFOCW</td>\n",
              "      <td>Male</td>\n",
              "      <td>0</td>\n",
              "      <td>No</td>\n",
              "      <td>No</td>\n",
              "      <td>45</td>\n",
              "      <td>No</td>\n",
              "      <td>No phone service</td>\n",
              "      <td>DSL</td>\n",
              "      <td>Yes</td>\n",
              "      <td>...</td>\n",
              "      <td>One year</td>\n",
              "      <td>No</td>\n",
              "      <td>Bank transfer (automatic)</td>\n",
              "      <td>42.30</td>\n",
              "      <td>1840.75</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>long term costumer</td>\n",
              "      <td>low charge</td>\n",
              "      <td>one year contract</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>9237-HQITU</td>\n",
              "      <td>Female</td>\n",
              "      <td>0</td>\n",
              "      <td>No</td>\n",
              "      <td>No</td>\n",
              "      <td>2</td>\n",
              "      <td>Yes</td>\n",
              "      <td>No</td>\n",
              "      <td>Fiber optic</td>\n",
              "      <td>No</td>\n",
              "      <td>...</td>\n",
              "      <td>Month-to-month</td>\n",
              "      <td>Yes</td>\n",
              "      <td>Electronic check</td>\n",
              "      <td>70.70</td>\n",
              "      <td>151.65</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>long term costumer</td>\n",
              "      <td>mid charge</td>\n",
              "      <td>two year contract</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7038</th>\n",
              "      <td>6840-RESVB</td>\n",
              "      <td>Male</td>\n",
              "      <td>0</td>\n",
              "      <td>Yes</td>\n",
              "      <td>Yes</td>\n",
              "      <td>24</td>\n",
              "      <td>Yes</td>\n",
              "      <td>Yes</td>\n",
              "      <td>DSL</td>\n",
              "      <td>Yes</td>\n",
              "      <td>...</td>\n",
              "      <td>One year</td>\n",
              "      <td>Yes</td>\n",
              "      <td>Mailed check</td>\n",
              "      <td>84.80</td>\n",
              "      <td>1990.50</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>long term costumer</td>\n",
              "      <td>mid charge</td>\n",
              "      <td>one year contract</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7039</th>\n",
              "      <td>2234-XADUH</td>\n",
              "      <td>Female</td>\n",
              "      <td>0</td>\n",
              "      <td>Yes</td>\n",
              "      <td>Yes</td>\n",
              "      <td>72</td>\n",
              "      <td>Yes</td>\n",
              "      <td>Yes</td>\n",
              "      <td>Fiber optic</td>\n",
              "      <td>No</td>\n",
              "      <td>...</td>\n",
              "      <td>One year</td>\n",
              "      <td>Yes</td>\n",
              "      <td>Credit card (automatic)</td>\n",
              "      <td>103.20</td>\n",
              "      <td>7362.90</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>long term costumer</td>\n",
              "      <td>high charge</td>\n",
              "      <td>one year contract</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7040</th>\n",
              "      <td>4801-JZAZL</td>\n",
              "      <td>Female</td>\n",
              "      <td>0</td>\n",
              "      <td>Yes</td>\n",
              "      <td>Yes</td>\n",
              "      <td>11</td>\n",
              "      <td>No</td>\n",
              "      <td>No phone service</td>\n",
              "      <td>DSL</td>\n",
              "      <td>Yes</td>\n",
              "      <td>...</td>\n",
              "      <td>Month-to-month</td>\n",
              "      <td>Yes</td>\n",
              "      <td>Electronic check</td>\n",
              "      <td>29.60</td>\n",
              "      <td>346.45</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>long term costumer</td>\n",
              "      <td>low charge</td>\n",
              "      <td>two year contract</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7041</th>\n",
              "      <td>8361-LTMKD</td>\n",
              "      <td>Male</td>\n",
              "      <td>1</td>\n",
              "      <td>Yes</td>\n",
              "      <td>No</td>\n",
              "      <td>4</td>\n",
              "      <td>Yes</td>\n",
              "      <td>Yes</td>\n",
              "      <td>Fiber optic</td>\n",
              "      <td>No</td>\n",
              "      <td>...</td>\n",
              "      <td>Month-to-month</td>\n",
              "      <td>Yes</td>\n",
              "      <td>Mailed check</td>\n",
              "      <td>74.40</td>\n",
              "      <td>306.60</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>long term costumer</td>\n",
              "      <td>mid charge</td>\n",
              "      <td>two year contract</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7042</th>\n",
              "      <td>3186-AJIEK</td>\n",
              "      <td>Male</td>\n",
              "      <td>0</td>\n",
              "      <td>No</td>\n",
              "      <td>No</td>\n",
              "      <td>66</td>\n",
              "      <td>Yes</td>\n",
              "      <td>No</td>\n",
              "      <td>Fiber optic</td>\n",
              "      <td>Yes</td>\n",
              "      <td>...</td>\n",
              "      <td>Two year</td>\n",
              "      <td>Yes</td>\n",
              "      <td>Bank transfer (automatic)</td>\n",
              "      <td>105.65</td>\n",
              "      <td>6844.50</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>long term costumer</td>\n",
              "      <td>high charge</td>\n",
              "      <td>two year contract</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>7043 rows × 25 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-7554f7c2-26a3-48a3-86f7-50f34db3b318')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-7554f7c2-26a3-48a3-86f7-50f34db3b318 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-7554f7c2-26a3-48a3-86f7-50f34db3b318');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-17993d55-6590-4053-8489-8c078b3e0693\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-17993d55-6590-4053-8489-8c078b3e0693')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-17993d55-6590-4053-8489-8c078b3e0693 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_498193eb-05f9-4d64-a9c5-2ff4f43e6d47\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('df')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_498193eb-05f9-4d64-a9c5-2ff4f43e6d47 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('df');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df"
            }
          },
          "metadata": {},
          "execution_count": 52
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "def calculate_churn_rate(segment):\n",
        "  total_customers=len(segment)\n",
        "  churned_customers=segment['Churn_Yes_Num'].sum()\n",
        "  churn_rate = (churned_customers / total_customers)*100\n",
        "  return churn_rate\n",
        "\n",
        "tenure_segment=df.groupby('tenure_segment')\n",
        "tenure_churn_rate=tenure_segment.apply(calculate_churn_rate)"
      ],
      "metadata": {
        "id": "Qp0UAT4Nmml-"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def calculate_churn_rate(segment):\n",
        "    total_customers = len(segment)\n",
        "    churned_customers = segment['Churn'].sum()\n",
        "    churn_rate = (churned_customers / total_customers) * 100\n",
        "    return churn_rate\n",
        "\n",
        "# Segment customers based on tenure\n",
        "tenure_segment = df.groupby('tenure_segment')\n",
        "tenure_churn_rate = tenure_segment.apply(calculate_churn_rate)\n",
        "\n",
        "# Segment customers based on monthly charges\n",
        "charges_segment = df.groupby('charges_segment')\n",
        "charges_churn_rate = charges_segment.apply(calculate_churn_rate)\n",
        "\n",
        "# Segment customers based on contract type\n",
        "contract_segment = df.groupby('contract_segment')\n",
        "contract_churn_rate = contract_segment.apply(calculate_churn_rate)"
      ],
      "metadata": {
        "id": "fACSLbWumn0W"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Segment customers based on tenure\n",
        "customer_segments = df.groupby('tenure_segment')\n",
        "segment_churn_rates = customer_segments.apply(calculate_churn_rate)"
      ],
      "metadata": {
        "id": "xpebJbapnJG9"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def calculate_churn_rates(df):\n",
        "    segments = define_segments(df)\n",
        "    churn_rates = calculate_rates(segments)\n",
        "    print_rates(churn_rates)"
      ],
      "metadata": {
        "id": "0K7FaA7cnMno"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def calculate_churn_rate(segment):\n",
        "    total_customers = len(segment)\n",
        "    churned_customers = segment['Churn_Yes'].sum()\n",
        "    churn_rate = (churned_customers / total_customers) * 100\n",
        "    return churn_rate\n",
        "\n",
        "def calculate_churn_rates(df):\n",
        "    segments = define_segments(df)\n",
        "    churn_rates = calculate_rates(segments)\n",
        "    print_rates(churn_rates)\n",
        "\n",
        "def define_segments(df):\n",
        "    return df.groupby(['tenure_segment', 'charges_segment', 'contract_segment'])\n",
        "\n",
        "def calculate_rates(segments):\n",
        "    return segments.apply(calculate_churn_rate)\n",
        "\n",
        "def print_rates(churn_rates):\n",
        "    print(churn_rates)\n"
      ],
      "metadata": {
        "id": "wt8MpUOqnUpM"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "churn_rates = {\n",
        "    'tenure': segment_churn_rates,\n",
        "    'charges': charges_churn_rate,\n",
        "    'contract': contract_churn_rate\n",
        "}\n",
        "\n",
        "print(churn_rates)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Y2VH4jsZnZFN",
        "outputId": "7cf3c096-c98a-4fc2-9db6-3bf515aaccbb"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "{'tenure': tenure_segment\n",
            "long term costumer    0.0\n",
            "mid term customer     0.0\n",
            "new costumer          0.0\n",
            "dtype: float64, 'charges': charges_segment\n",
            "high charge    0.0\n",
            "low charge     0.0\n",
            "mid charge     0.0\n",
            "dtype: float64, 'contract': contract_segment\n",
            "one year contract    0.0\n",
            "two year contract    0.0\n",
            "dtype: float64}\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df['Churn'] = df['Churn'].map({'Yes': 1, 'No': 0})\n",
        "selected_columns = ['tenure', 'Churn']\n",
        "X = df[selected_columns]\n",
        "imputer = SimpleImputer(strategy='mean')\n",
        "X_imputed = imputer.fit_transform(X)\n",
        "scaler = StandardScaler()\n",
        "X_scaled = scaler.fit_transform(X_imputed)\n",
        "\n",
        "wcss = []\n",
        "for i in range(1, 11):\n",
        "    kmeans = KMeans(n_clusters=i, init='k-means++', random_state=0)\n",
        "    kmeans.fit(X_scaled)\n",
        "    wcss.append(kmeans.inertia_)\n",
        "\n",
        "plt.plot(range(1, 11), wcss)\n",
        "plt.title('Elbow Method')\n",
        "plt.xlabel('churn')\n",
        "plt.ylabel('tenure')\n",
        "plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 839
        },
        "id": "__AKynIZVwYX",
        "outputId": "084c98f5-1067-412a-e967-313f4a58728e"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/cluster/_kmeans.py:870: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/cluster/_kmeans.py:870: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/cluster/_kmeans.py:870: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/cluster/_kmeans.py:870: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/cluster/_kmeans.py:870: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/cluster/_kmeans.py:870: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/cluster/_kmeans.py:870: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/cluster/_kmeans.py:870: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/cluster/_kmeans.py:870: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/cluster/_kmeans.py:870: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n",
            "  warnings.warn(\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df['Churn'] = df['Churn'].map({'Yes': 1, 'No': 0})\n",
        "selected_columns = ['MonthlyCharges', 'Churn']\n",
        "X = df[selected_columns]\n",
        "imputer = SimpleImputer(strategy='mean')\n",
        "X_imputed = imputer.fit_transform(X)\n",
        "scaler = StandardScaler()\n",
        "X_scaled = scaler.fit_transform(X_imputed)\n",
        "\n",
        "wcss = []\n",
        "for i in range(1, 11):\n",
        "    kmeans = KMeans(n_clusters=i, init='k-means++', random_state=0)\n",
        "    kmeans.fit(X_scaled)\n",
        "    wcss.append(kmeans.inertia_)\n",
        "\n",
        "plt.plot(range(1, 11), wcss)\n",
        "plt.title('Elbow Method')\n",
        "plt.xlabel('churn')\n",
        "plt.ylabel('monthly charges')\n",
        "plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 839
        },
        "id": "ILVxM-E5Wozx",
        "outputId": "5229728a-af53-48da-ea2d-9b968749c1f9"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/cluster/_kmeans.py:870: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/cluster/_kmeans.py:870: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/cluster/_kmeans.py:870: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/cluster/_kmeans.py:870: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/cluster/_kmeans.py:870: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/cluster/_kmeans.py:870: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/cluster/_kmeans.py:870: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/cluster/_kmeans.py:870: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/cluster/_kmeans.py:870: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/cluster/_kmeans.py:870: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n",
            "  warnings.warn(\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df['Churn'] = df['Churn'].map({'Yes': 1, 'No': 0})\n",
        "selected_columns = ['Contract_Month-to-month', 'Churn']\n",
        "X = df_encoded[selected_columns]\n",
        "imputer = SimpleImputer(strategy='mean')\n",
        "X_imputed = imputer.fit_transform(X)\n",
        "scaler = StandardScaler()\n",
        "X_scaled = scaler.fit_transform(X_imputed)\n",
        "\n",
        "wcss = []\n",
        "for i in range(1, 11):\n",
        "    kmeans = KMeans(n_clusters=i, init='k-means++', random_state=0)\n",
        "    kmeans.fit(X_scaled)\n",
        "    wcss.append(kmeans.inertia_)\n",
        "\n",
        "plt.plot(range(1, 11), wcss)\n",
        "plt.title('Elbow Method')\n",
        "plt.xlabel('churn')\n",
        "plt.ylabel('contract_month to month')\n",
        "plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "b9pIK4iOXHgz",
        "outputId": "d778001d-cd81-4904-d8ce-73b979056217"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/cluster/_kmeans.py:870: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/cluster/_kmeans.py:870: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/cluster/_kmeans.py:870: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/cluster/_kmeans.py:870: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/cluster/_kmeans.py:870: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n",
            "  warnings.warn(\n",
            "<ipython-input-30-86b08318a848>:12: ConvergenceWarning: Number of distinct clusters (4) found smaller than n_clusters (5). Possibly due to duplicate points in X.\n",
            "  kmeans.fit(X_scaled)\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/cluster/_kmeans.py:870: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n",
            "  warnings.warn(\n",
            "<ipython-input-30-86b08318a848>:12: ConvergenceWarning: Number of distinct clusters (4) found smaller than n_clusters (6). Possibly due to duplicate points in X.\n",
            "  kmeans.fit(X_scaled)\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/cluster/_kmeans.py:870: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n",
            "  warnings.warn(\n",
            "<ipython-input-30-86b08318a848>:12: ConvergenceWarning: Number of distinct clusters (4) found smaller than n_clusters (7). Possibly due to duplicate points in X.\n",
            "  kmeans.fit(X_scaled)\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/cluster/_kmeans.py:870: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n",
            "  warnings.warn(\n",
            "<ipython-input-30-86b08318a848>:12: ConvergenceWarning: Number of distinct clusters (4) found smaller than n_clusters (8). Possibly due to duplicate points in X.\n",
            "  kmeans.fit(X_scaled)\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/cluster/_kmeans.py:870: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n",
            "  warnings.warn(\n",
            "<ipython-input-30-86b08318a848>:12: ConvergenceWarning: Number of distinct clusters (4) found smaller than n_clusters (9). Possibly due to duplicate points in X.\n",
            "  kmeans.fit(X_scaled)\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/cluster/_kmeans.py:870: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n",
            "  warnings.warn(\n",
            "<ipython-input-30-86b08318a848>:12: ConvergenceWarning: Number of distinct clusters (4) found smaller than n_clusters (10). Possibly due to duplicate points in X.\n",
            "  kmeans.fit(X_scaled)\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "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eLRs2RL9+/dH//794evriwkTJqC83LhzTAYOHIhTp04hNTVV2sLDwxEbGyv92d7eHgkJCdJz0tPTkZ2djcjISABAZGQkTp06hfz8379tFR8fD6VSiU6dOklj7nyN+jH1r3E3CoUCSqVSZ6PGYWdrg1GP+QMANiZlyZyGiIishcGladasWdi3bx9+/PFHFBcXo7i4GP/973+xb98+zJ4926jhXF1d0aVLF53NxcUFnp6e6NKlC1QqFSZMmIBZs2Zhz549SElJwbhx4xAZGYnevXsDAAYNGoROnTrhpZdeQlpaGnbt2oV//OMfmDx5MhSKulWlX331VWRkZOCNN97A+fPnsXr1amzZsgUzZ8406uch4xndyx+2NgKOZBbiQl6J3HGIiMgKGFyavv/+e/znP//BU089JZ1hGTx4MD777DN89913psh4X8uXL8fTTz+N5557Dv3794ePjw9++OEH6bitrS22b98OW1tbREZG4sUXX8TLL7+Mt99+WxoTGBiIn376CfHx8QgLC8MHH3yAf//734iJiWn0z0P68VE5IjrECwCwiWebiIioEQiigQsuOTs7IyUlBSEhITr7z5w5g169eqGsrMyoAS2FRqOBSqWCWq3mpbpGcuDiDbz0nyNwVdgh6e8D4aIw+HsNRERk5Qz5/W3wmabIyEi89dZbqKiokPbdunULixYtuu8cICJj6xPUHG08nVFSWYP/pV2TOw4RETVxBv+n+UcffYSYmBi0bt0aYWFhAIC0tDQ4OjrytiPUqGxsBMRGBGDxz+ewMSkLox7z4w2kiYjIZAy+PAcA5eXl2LRpE86fPw8ACAkJQWxs7D2/nm8NeHlOHkVlVYhYkoCqGi22/i0K3f3dH/wkIiKi2wz5/f1Qk0CcnZ0xceLEhwpHZEzuLg54umtL/HD8KjYmZbM0ERGRyRg8p2nJkiX4v//7vwb7/+///g/vv/++UUIRGeLF2/ej237yGorLq2ROQ0RETZXBpenTTz9FcHDD+3117twZa9euNUooIkN093NDp5ZKVNZo8V3KFbnjEBFRE2VwacrNzUXLli0b7G/RogWuX79ulFBEhhAEQTrbtCk5G1qtwdP0iIiIHsjg0uTn54dDhw412H/o0CH4+voaJRSRof7SzRfNFHbIvFmGw5cL5I5DRERNkMETwSdOnIgZM2aguroaTzzxBAAgISEB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\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df['Churn'] = df['Churn'].map({'Yes': 1, 'No': 0})\n",
        "selected_columns = ['Contract_One year', 'Churn']\n",
        "X = df_encoded[selected_columns]\n",
        "imputer = SimpleImputer(strategy='mean')\n",
        "X_imputed = imputer.fit_transform(X)\n",
        "scaler = StandardScaler()\n",
        "X_scaled = scaler.fit_transform(X_imputed)\n",
        "\n",
        "wcss = []\n",
        "for i in range(1, 11):\n",
        "    kmeans = KMeans(n_clusters=i, init='k-means++', random_state=0)\n",
        "    kmeans.fit(X_scaled)\n",
        "    wcss.append(kmeans.inertia_)\n",
        "\n",
        "plt.plot(range(1, 11), wcss)\n",
        "plt.title('Elbow Method')\n",
        "plt.xlabel('churn')\n",
        "plt.ylabel('contract one year')\n",
        "plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "4yiIhNXhYYgw",
        "outputId": "7db9a517-f9c5-400e-fbe4-93b2ab33b979"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/cluster/_kmeans.py:870: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/cluster/_kmeans.py:870: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/cluster/_kmeans.py:870: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/cluster/_kmeans.py:870: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/cluster/_kmeans.py:870: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n",
            "  warnings.warn(\n",
            "<ipython-input-31-99d7774f9b4a>:12: ConvergenceWarning: Number of distinct clusters (4) found smaller than n_clusters (5). Possibly due to duplicate points in X.\n",
            "  kmeans.fit(X_scaled)\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/cluster/_kmeans.py:870: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n",
            "  warnings.warn(\n",
            "<ipython-input-31-99d7774f9b4a>:12: ConvergenceWarning: Number of distinct clusters (4) found smaller than n_clusters (6). Possibly due to duplicate points in X.\n",
            "  kmeans.fit(X_scaled)\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/cluster/_kmeans.py:870: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n",
            "  warnings.warn(\n",
            "<ipython-input-31-99d7774f9b4a>:12: ConvergenceWarning: Number of distinct clusters (4) found smaller than n_clusters (7). Possibly due to duplicate points in X.\n",
            "  kmeans.fit(X_scaled)\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/cluster/_kmeans.py:870: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n",
            "  warnings.warn(\n",
            "<ipython-input-31-99d7774f9b4a>:12: ConvergenceWarning: Number of distinct clusters (4) found smaller than n_clusters (8). Possibly due to duplicate points in X.\n",
            "  kmeans.fit(X_scaled)\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/cluster/_kmeans.py:870: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n",
            "  warnings.warn(\n",
            "<ipython-input-31-99d7774f9b4a>:12: ConvergenceWarning: Number of distinct clusters (4) found smaller than n_clusters (9). Possibly due to duplicate points in X.\n",
            "  kmeans.fit(X_scaled)\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/cluster/_kmeans.py:870: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n",
            "  warnings.warn(\n",
            "<ipython-input-31-99d7774f9b4a>:12: ConvergenceWarning: Number of distinct clusters (4) found smaller than n_clusters (10). Possibly due to duplicate points in X.\n",
            "  kmeans.fit(X_scaled)\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df['Churn'] = df['Churn'].map({'Yes': 1, 'No': 0})\n",
        "selected_columns = ['Contract_Two year', 'Churn']\n",
        "X = df_encoded[selected_columns]\n",
        "imputer = SimpleImputer(strategy='mean')\n",
        "X_imputed = imputer.fit_transform(X)\n",
        "scaler = StandardScaler()\n",
        "X_scaled = scaler.fit_transform(X_imputed)\n",
        "\n",
        "wcss = []\n",
        "for i in range(1, 11):\n",
        "    kmeans = KMeans(n_clusters=i, init='k-means++', random_state=0)\n",
        "    kmeans.fit(X_scaled)\n",
        "    wcss.append(kmeans.inertia_)\n",
        "\n",
        "plt.plot(range(1, 11), wcss)\n",
        "plt.title('Elbow Method')\n",
        "plt.xlabel('Number of Clusters')\n",
        "plt.ylabel('WCSS (Within-Cluster Sum of Squares)')\n",
        "plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "L01cPZLWYk7R",
        "outputId": "948c8edd-021b-44bc-84d2-88d09e9c737a"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/cluster/_kmeans.py:870: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/cluster/_kmeans.py:870: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/cluster/_kmeans.py:870: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/cluster/_kmeans.py:870: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/cluster/_kmeans.py:870: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n",
            "  warnings.warn(\n",
            "<ipython-input-32-ca5e13bae8c9>:12: ConvergenceWarning: Number of distinct clusters (4) found smaller than n_clusters (5). Possibly due to duplicate points in X.\n",
            "  kmeans.fit(X_scaled)\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/cluster/_kmeans.py:870: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n",
            "  warnings.warn(\n",
            "<ipython-input-32-ca5e13bae8c9>:12: ConvergenceWarning: Number of distinct clusters (4) found smaller than n_clusters (6). Possibly due to duplicate points in X.\n",
            "  kmeans.fit(X_scaled)\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/cluster/_kmeans.py:870: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n",
            "  warnings.warn(\n",
            "<ipython-input-32-ca5e13bae8c9>:12: ConvergenceWarning: Number of distinct clusters (4) found smaller than n_clusters (7). Possibly due to duplicate points in X.\n",
            "  kmeans.fit(X_scaled)\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/cluster/_kmeans.py:870: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n",
            "  warnings.warn(\n",
            "<ipython-input-32-ca5e13bae8c9>:12: ConvergenceWarning: Number of distinct clusters (4) found smaller than n_clusters (8). Possibly due to duplicate points in X.\n",
            "  kmeans.fit(X_scaled)\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/cluster/_kmeans.py:870: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n",
            "  warnings.warn(\n",
            "<ipython-input-32-ca5e13bae8c9>:12: ConvergenceWarning: Number of distinct clusters (4) found smaller than n_clusters (9). Possibly due to duplicate points in X.\n",
            "  kmeans.fit(X_scaled)\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/cluster/_kmeans.py:870: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n",
            "  warnings.warn(\n",
            "<ipython-input-32-ca5e13bae8c9>:12: ConvergenceWarning: Number of distinct clusters (4) found smaller than n_clusters (10). Possibly due to duplicate points in X.\n",
            "  kmeans.fit(X_scaled)\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df_encoded.head(2)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 231
        },
        "id": "Iv0cGvrXrceg",
        "outputId": "bae132eb-fbdb-45ef-ba90-c58f31a35761"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   customerID  SeniorCitizen  tenure  MonthlyCharges  TotalCharges  Churn  \\\n",
              "0  7590-VHVEG              0       1           29.85         29.85      0   \n",
              "1  5575-GNVDE              0      34           56.95       1889.50      0   \n",
              "\n",
              "   gender_Female  gender_Male  Partner_No  Partner_Yes  ...  \\\n",
              "0           True        False       False         True  ...   \n",
              "1          False         True        True        False  ...   \n",
              "\n",
              "   StreamingMovies_Yes  Contract_Month-to-month  Contract_One year  \\\n",
              "0                False                     True              False   \n",
              "1                False                    False               True   \n",
              "\n",
              "   Contract_Two year  PaperlessBilling_No  PaperlessBilling_Yes  \\\n",
              "0              False                False                  True   \n",
              "1              False                 True                 False   \n",
              "\n",
              "   PaymentMethod_Bank transfer (automatic)  \\\n",
              "0                                    False   \n",
              "1                                    False   \n",
              "\n",
              "   PaymentMethod_Credit card (automatic)  PaymentMethod_Electronic check  \\\n",
              "0                                  False                            True   \n",
              "1                                  False                           False   \n",
              "\n",
              "   PaymentMethod_Mailed check  \n",
              "0                       False  \n",
              "1                        True  \n",
              "\n",
              "[2 rows x 47 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-d2ee2e73-6da1-4c68-85eb-9c2bfee5dd28\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>customerID</th>\n",
              "      <th>SeniorCitizen</th>\n",
              "      <th>tenure</th>\n",
              "      <th>MonthlyCharges</th>\n",
              "      <th>TotalCharges</th>\n",
              "      <th>Churn</th>\n",
              "      <th>gender_Female</th>\n",
              "      <th>gender_Male</th>\n",
              "      <th>Partner_No</th>\n",
              "      <th>Partner_Yes</th>\n",
              "      <th>...</th>\n",
              "      <th>StreamingMovies_Yes</th>\n",
              "      <th>Contract_Month-to-month</th>\n",
              "      <th>Contract_One year</th>\n",
              "      <th>Contract_Two year</th>\n",
              "      <th>PaperlessBilling_No</th>\n",
              "      <th>PaperlessBilling_Yes</th>\n",
              "      <th>PaymentMethod_Bank transfer (automatic)</th>\n",
              "      <th>PaymentMethod_Credit card (automatic)</th>\n",
              "      <th>PaymentMethod_Electronic check</th>\n",
              "      <th>PaymentMethod_Mailed check</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>7590-VHVEG</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>29.85</td>\n",
              "      <td>29.85</td>\n",
              "      <td>0</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "      <td>...</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>5575-GNVDE</td>\n",
              "      <td>0</td>\n",
              "      <td>34</td>\n",
              "      <td>56.95</td>\n",
              "      <td>1889.50</td>\n",
              "      <td>0</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>...</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>2 rows × 47 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-d2ee2e73-6da1-4c68-85eb-9c2bfee5dd28')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-d2ee2e73-6da1-4c68-85eb-9c2bfee5dd28 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-d2ee2e73-6da1-4c68-85eb-9c2bfee5dd28');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-a7b7416e-85e1-4e50-9300-16f34680fa98\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-a7b7416e-85e1-4e50-9300-16f34680fa98')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-a7b7416e-85e1-4e50-9300-16f34680fa98 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df_encoded"
            }
          },
          "metadata": {},
          "execution_count": 33
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "features = ['tenure', 'Churn']\n",
        "\n",
        "X = StandardScaler().fit_transform(df_encoded[features])\n",
        "\n",
        "kmeans = KMeans(n_clusters=3, random_state=0)\n",
        "df_encoded['Cluster'] = kmeans.fit_predict(X)\n",
        "\n",
        "plt.figure(figsize=(10, 6))\n",
        "sns.scatterplot(data=df_encoded, x='Churn', y='tenure', hue='Cluster', palette='viridis')\n",
        "plt.title('Customer Segmentation')\n",
        "plt.xlabel('churn')\n",
        "plt.ylabel('tenure')\n",
        "plt.legend(title='Churn Status', labels=['cluster 0', 'cluster 1','cluster 2','cluster 3'])\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 619
        },
        "id": "hkBhm4kdku1J",
        "outputId": "4f6d11d7-353a-4a79-efdc-d4dc5c2ff950"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/cluster/_kmeans.py:870: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n",
            "  warnings.warn(\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "features = ['Contract_Month-to-month', 'Churn']\n",
        "\n",
        "X = StandardScaler().fit_transform(df_encoded[features])\n",
        "\n",
        "kmeans = KMeans(n_clusters=3, random_state=0)\n",
        "df_encoded['Cluster'] = kmeans.fit_predict(X)\n",
        "\n",
        "plt.figure(figsize=(10, 6))\n",
        "sns.scatterplot(data=df_encoded, x='Churn', y='Contract_Month-to-month', hue='Cluster', palette='viridis')\n",
        "plt.title('Customer Segmentation')\n",
        "plt.xlabel('churn')\n",
        "plt.ylabel('Contract_Month-to-month')\n",
        "plt.legend(title='Churn Status', labels=['cluster 0', 'cluster 1','cluster 2','cluster 3'])\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 619
        },
        "id": "xjC1x7HklhCh",
        "outputId": "ee219bad-57b3-4788-8d81-a0b1237bee62"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/cluster/_kmeans.py:870: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n",
            "  warnings.warn(\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "features = ['Contract_One year', 'Churn']\n",
        "\n",
        "X = StandardScaler().fit_transform(df_encoded[features])\n",
        "\n",
        "kmeans = KMeans(n_clusters=3, random_state=0)\n",
        "df_encoded['Cluster'] = kmeans.fit_predict(X)\n",
        "\n",
        "plt.figure(figsize=(10, 6))\n",
        "sns.scatterplot(data=df_encoded, x='Churn', y='Contract_One year', hue='Cluster', palette='viridis')\n",
        "plt.title('Customer Segmentation')\n",
        "plt.xlabel('churn')\n",
        "plt.ylabel('Contract_One year')\n",
        "plt.legend(title='Churn Status', labels=['cluster 0', 'cluster 1','cluster 2','cluster 3'])\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 619
        },
        "id": "38nBWM_vmAJA",
        "outputId": "88647815-a167-48dd-bace-7a6e094c75e7"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/cluster/_kmeans.py:870: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n",
            "  warnings.warn(\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x600 with 1 Axes>"
            ],
            "image/png": "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AACAK4HTZpwCAwPl6uqqrKwsu/asrCyFhISUuM/48eN13333aejQoZKkVq1a6eTJkxo2bJieeeYZubgUz4EeHh7y8PAo/xMAAAAAcNVw2oyTu7u72rVrp9TUVFtbYWGhUlNT1bFjxxL3OXXqVLFw5OrqKkkyDKPiigUAAABwVXPajJMkJSUlKTExUdddd506dOigGTNm6OTJkxo8eLAkKSEhQfXr19eUKVMkSbfddpumT5+utm3bKjY2Vrt27dL48eN122232QIUAAAAAJQ3pwan/v376/Dhw5owYYIyMzPVpk0brVixwrZgREZGht0M07PPPiuLxaJnn31W+/fvV926dXXbbbdp8uTJzjoFAAAAAFcBi3GV3eOWk5OjgIAAZWdny9/f39nlAAAAAHASR7JBtVpVDwAAAACcgeAEAAAAACYITgAAAABgguAEAAAAACYITgAAAABgguAEAAAAACYITgAAAABgguAEAAAAACYITgAAAABgguAEAAAAACYITgAAAABgguAEAAAAACYITgAAAABgguAEAAAAACYITgAAAABgguAEAAAAACYITgAAAABgguAEAAAAACYITgAAAABgguAEAAAAACYITgAAAABgguAEAAAAACYITgAAAABgguAEAAAAACYITgAAAABgguAEAAAAACYITgAAAABgguAEAAAAACYITgAAAABgguAEAAAAACYITgAAAABgguAEAAAAACYITgAAAABgguAEAAAAACYITgAAAABgguAEAAAAACYITgAAAABgguAEAAAAACYITgAAAABgguAEAAAAACYITgAAAABgguAEAAAAACYITgAAAABgguAEAAAAACYITgAAAABgguAEAAAAACYITgAAAABgguAEAAAAACYITgAAAABgguAEAAAAACYITgAAAABgguAEAAAAACYITgAAAABgguAEAAAAACYITgAAAABgwqHgdPbsWQ0ZMkR79+6tqHoAAAAAoMpxKDjVqFFDn3/+eUXVAgAAAABVksO36vXp00dLliypgFIAAAAAoGpyc3SHyMhIPffcc/rxxx/Vrl07+fj42G0fOXJkuRUHAAAAAFWBxTAMw5EdIiIiLj6YxaI9e/ZcdlEVKScnRwEBAcrOzpa/v7+zywEAAADgJI5kA4dnnFgYAgAAAMDVhuXIAQAAAMCEwzNOkvTXX39p6dKlysjIUEFBgd226dOnl0thAAAAAFBVOBycUlNTdfvtt6tx48basWOHWrZsqfT0dBmGoWuvvbYiagQAAACqFKvVqrNnzzq7DJSCu7u7XFwu/0Y7h4PTuHHjNHr0aE2aNEl+fn76/PPPFRQUpIEDB+rmm2++7IIAAACAqsowDGVmZurEiRPOLgWl5OLiooiICLm7u1/WOA4Hp+3bt+uTTz45v7Obm06fPi1fX18999xzuuOOO/Twww9fVkEAAABAVVUUmoKCguTt7S2LxeLsknAJhYWFOnDggA4ePKiGDRte1u/L4eDk4+Nje66pXr162r17t1q0aCFJOnLkSJkLAQAAAKoyq9VqC0116tRxdjkopbp16+rAgQM6d+6catSoUeZxHA5O119/vX744QdFR0erV69eeuKJJ7R161YtWrRI119/fZkLAQAAAKqyomeavL29nVwJHFF0i57Vaq3c4DR9+nTl5eVJkiZNmqS8vDwtWLBAkZGRrKgHAACAKx6351Uv5fX7cjg4NW7c2PbPPj4+euutt8qlEAAAAACoqsq0Lt+JEyf07rvvaty4cTp27JgkadOmTdq/f3+5FgcAAABc6SwWi5YsWeLsMmDC4eD0yy+/KCoqSi+//LJeeeUV21KMixYt0rhx48q7PgAAAKDayszM1KOPPqrGjRvLw8NDYWFhuu2225Samurs0i5q7969uvfeexUaGipPT081aNBAd9xxh3bs2CFJSk9Pl8ViUVpamsNjV+eQ6HBwSkpK0qBBg/THH3/I09PT1t6rVy9999135VocAAAAUF2lp6erXbt2+uabb/Tvf/9bW7du1YoVK9S9e3cNHz68Qo9dtAq2o86ePaubbrpJ2dnZWrRokXbu3KkFCxaoVatWV/27qxwOTuvXr9eDDz5YrL1+/frKzMx0uIDZs2crPDxcnp6eio2N1bp16y7Z/8SJExo+fLjq1asnDw8PRUVFafny5Q4fFwAAAKhIjzzyiCwWi9atW6d//vOfioqKUosWLZSUlKSffvrJru+RI0fUt29feXt7KzIyUkuXLrVtmzt3rmrWrGnXf8mSJXaLHkycOFFt2rTRu+++q4iICNsEh8Vi0bvvvnvRsS/022+/affu3XrjjTd0/fXXq1GjRurcubNeeOEF2wraERERkqS2bdvKYrHohhtukHQ+J9x0000KDAxUQECAunXrpk2bNtnGDg8PlyT17dtXFovF9vOgQYPUp08fuzoef/xx27iS9Nlnn6lVq1by8vJSnTp1FBcXp5MnT170PCqCw8HJw8NDOTk5xdp///131a1b16GxFixYoKSkJCUnJ2vTpk2KiYlRfHy8Dh06VGL/goIC3XTTTUpPT9dnn32mnTt3as6cOapfv76jpwEAAABUmGPHjmnFihUaPny4fHx8im2/MAhNmjRJd999t3755Rf16tVLAwcOtK0lUFq7du3S559/rkWLFtndRufI2HXr1pWLi4s+++wzWa3WEvsUTXR8/fXXOnjwoBYtWiRJys3NVWJion744Qf99NNPioyMVK9evZSbmyvpfLCSpJSUFB08eND2s5mDBw9qwIABGjJkiLZv367Vq1frzjvvlGEYpdq/vDgcnG6//XY999xztnXsLRaLMjIyNHbsWP3zn/90aKzp06frgQce0ODBg9W8eXO99dZb8vb21vvvv19i//fff1/Hjh3TkiVL1LlzZ4WHh6tbt26KiYlx9DQAAACACrNr1y4ZhqFmzZqVqv+gQYM0YMAANW3aVC+++KLy8vJM78S6UEFBgT788EO1bdtWrVu3LtPY9evX12uvvaYJEyaoVq1auvHGG/X8889rz549tj5FkyV16tRRSEiIateuLUm68cYb9a9//UvNmjVTdHS03nnnHZ06dUrffvut3X41a9ZUSEhIqSddDh48qHPnzunOO+9UeHi4WrVqpUceeUS+vr4OfT+Xy+HgNG3aNOXl5SkoKEinT59Wt27d1LRpU/n5+Wny5MmlHqegoEAbN25UXFzc/xXj4qK4uDitXbu2xH2WLl2qjh07avjw4QoODlbLli314osvXjQNS1J+fr5ycnLsPgAAAEBFcnQ25O9Bx8fHR/7+/he9C+tiGjVqVGIYcXTs4cOHKzMzU//zP/+jjh07auHChWrRooVWrlx5yeNnZWXpgQceUGRkpAICAuTv76+8vDxlZGQ4dB4XiomJUY8ePdSqVSv169dPc+bM0fHjxy9rzLJwODgFBARo5cqV+t///V+99tprGjFihJYvX65vv/22xGnIizly5IisVquCg4Pt2oODgy/6rNSePXts04bLly/X+PHjNW3aNL3wwgsXPc6UKVMUEBBg+4SFhZW6RgAAAKAsIiMjZbFYbCvRmalRo4bdzxaLRYWFhZLOTy5cGMSK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k/7zn/9o9+7dtvUYKpLD73EaOnSovv32W913332qV69eiSvsldaRI0dktVoVHBxs1x4cHHzR6cMffvhB7733XqmXTJwyZYomTZpU5hoBAACAcuHid3nby8DLy8uh/i4uLjIMw67t7Nmzdj9PnDhR9957r5YtW6Yvv/xSycnJmj9/vvr27VvimHl5eXJ1ddXGjRvl6upqt63oVr6iWkubLYpmtJo1a6batWura9euGj9+vOrVq1eq/cvC4eD05ZdfatmyZercuXNF1HNJubm5uu+++zRnzhwFBgaWap9x48bZJdCcnByFhYVVVIkAAABAySx1JPeu52/Lu5B71/Pby1lkZKS8vLyUmppaqtvz6tatq9zcXJ08eVI+Pj6SVOKERVRUlKKiojRq1CgNGDBAKSkp6tu3r9zd3WW1Wu36tm3bVlarVYcOHaqQ9QkKCwslnb/TrCI5HJxq1aql2rVrl8vBAwMD5erqqqysLLv2rKwshYSEFOu/e/dupaen67bbbrO1FX1Rbm5u2rlzp5o0aWK3j4eHhzw8PMqlXgAAAKCsLK4BUsAL5xeC+Ht4cu8qS8ALFbIwhKenp8aOHasxY8bI3d1dnTt31uHDh/Xbb7+V+NhLbGysvL299fTTT2vkyJH6+eef7VbOPn36tJ588kndddddioiI0F9//aX169frn//8pyQpPDxceXl5Sk1NVUxMjLy9vRUVFaWBAwcqISFB06ZNU9u2bXX48GGlpqaqdevW6t27d6nPZ/ny5crKylL79u3l6+ur3377TU8++aQ6d+6s8PDwy/26LsnhZ5yef/55TZgwQadOnbrsg7u7u6tdu3ZKTU21tRUWFio1NVUdO3Ys1r9Zs2baunWr0tLSbJ/bb79d3bt3V1paGjNJAAAAqNIsrvVkCZguS+AKWWovPP+/AdNlca24W8zGjx+vJ554QhMmTFB0dLT69++vQ4cOldi3du3a+vjjj7V8+XK1atVKn3zyiW1JcUlydXXV0aNHlZCQoKioKN1999265ZZbbI/GdOrUSQ899JD69++vunXraurUqZLOLzCXkJCgJ554Qtdcc4369Omj9evXq2HDhg6di5eXl+bMmaMuXbooOjpao0aN0u23364vvviibF+OAyzGhTcxmmjbtq12794twzAUHh6uGjVq2G3ftGmTQwUsWLBAiYmJevvtt9WhQwfN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SUpISFD9+vU1ZcoUSdLLL7+sCRMmaN68eQoPD7c9C+Xr6ytfX1+nnQcAAACAK5fTg1P//v11+PBhTZgwQZmZmWrTpo1WrFhhWzAiIyNDLi7/NzH25ptvqqCgQHfddZfdOMnJyZo4cWJllg4AAADgKuH09zhVNt7jBAAAAECqRu9xAgAAAIDqgOAEAAAAACYITgAAAABgguAEAAAAACYITgAAAABgguAEAAAAACYITgAAAABgguAEAAAAACYITgAAAABgguAEAAAAACYITgAAAABgguAEAAAAACYITgAAAABgguAEAAAAACYITgAAAABgguAEAAAAACYITgAAAABgguAEAAAAACYITgAAAABgguAEAAAAACYITgAAAABgguAEAAAAACYITgAAAABgguAEAAAAACYITgAAAABgguAEAAAAACYITgAAAABgguAEAAAAACYITgAAAABgguAEAAAAACYITgAAAABgguAEAAAAACYITgAAAABgguAEAAAAACYITgAAAABgguAEAAAAACYITgAAAABgguAEAAAAACYITgAAAABgguAEAAAAACYITgAAAABgguAEAAAAACYITgAAAABgguAEAAAAACYITgAAAABgguAEAAAAACYITgAAAABgguAEAAAAACYITgAAAABgguAEAAAAACYITgAAAABgguAEAAAAACYITgAAAABgguAEAAAAACYITgAAAABgguAEAAAAACYITgAAAABgguAEAAAAACYITgAAAABgguAEAAAAACYITgAAAABgguAEAAAAACYITgAAAABgguAEAAAAACYITgAAAABgguAEAAAAACYITgAAAABgguAEAAAAACYITgAAAABgguAEAAAAACYITgAAAABgguAEAAAAACbcnF3A1er06QIdyTiis/ln5e5RQ3UaBsrLy93ZZQEAAAAV5kBOjk6dOyvDMOTlVkMNAgKcXVKpVYkZp9mzZys8PFyenp6KjY3VunXrLtl/4cKFatasmTw9PdWqVSstX768kiotH5l7D2nJjC/0eJdn9WCb0RrZ+Rktmva/ytx7yNmlAQAAAOWuoKBAO44c1lOpXyn+47mK/58P9Ph/l2tLZqaOnTnp7PJKxenBacGCBUpKSlJycrI2bdqkmJgYxcfH69ChkkPEmjVrNGDAAN1///3avHmz+vTpoz59+ujXX3+t5MrL5tjB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\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "features = ['Contract_Two year', 'Churn']\n",
        "\n",
        "X = StandardScaler().fit_transform(df_encoded[features])\n",
        "\n",
        "kmeans = KMeans(n_clusters=3, random_state=0)\n",
        "df_encoded['Cluster'] = kmeans.fit_predict(X)\n",
        "\n",
        "plt.figure(figsize=(10, 6))\n",
        "sns.scatterplot(data=df_encoded, x='Churn', y='Contract_Two year', hue='Cluster', palette='viridis')\n",
        "plt.title('Customer Segmentation')\n",
        "plt.xlabel('churn')\n",
        "plt.ylabel('Contract_Two year')\n",
        "plt.legend(title='Churn Status', labels=['cluster 0', 'cluster 1','cluster 2','cluster 3'])\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 619
        },
        "id": "AXKWNYXAmOEd",
        "outputId": "809a271a-818f-4150-8d85-086f109f03b4"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/cluster/_kmeans.py:870: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n",
            "  warnings.warn(\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x600 with 1 Axes>"
            ],
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAA04AAAIjCAYAAAA0vUuxAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjcuMSwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/bCgiHAAAACXBIWXMAAA9hAAAPYQGoP6dpAABeXUlEQVR4nO3deVxV1f7/8ffhKPPgCIiiOJEzmik5pSZJaZZ5SzML1NRrOdwkTa0UrMzypmk5VFZYeUsb1OvNoYzUMi1NxazUciBMBVETUBQQ9u+PfpxvJ9DNQeCgvp6Px3l8Y+211/7sw3745X3X3mtbDMMwBAAAAAC4JBdnFwAAAAAAFR3BCQAAAABMEJwAAAAAwATBCQAAAABMEJwAAAAAwATBCQAAAABMEJwAAAAAwATBCQAAAABMEJwAAAAAwATBCQAAFJvFYlFcXJyzywCAckdwAoBydvDgQf3zn/9UgwYN5O7uLl9fX3Xq1Elz587V+fPny+SY77//vubMmVMmY1cEe/bs0b333qt69erJ3d1dtWvX1m233aZXX33V2aWVu2PHjikuLk6JiYklHmPNmjWEIwD4G4thGIaziwCA68Xq1at13333yc3NTVFRUWrRooVycnK0efNmffLJJxo8eLDeeOONUj/unXfeqR9//FFJSUmlPrazbdmyRd27d1fdunUVHR2twMBAHTlyRN9++60OHjyoAwcOOLvEcvX999+rXbt2io+P1+DBg0s0xujRozV//nwV9SfChQsXVKlSJVWqVOkKKwWAqwv/6gFAOTl8+LDuv/9+1atXT19++aVq1apl2zZq1CgdOHBAq1evdmKFFde5c+fk5eVV5Lbp06fLz89P27dvV5UqVey2nThxohyqu764u7s7uwQAcApu1QOAcjJz5kydPXtWb731ll1oKtCoUSP961//kiQlJSXJYrFo8eLFhfr9/RmTzMxMPfbYYwoJCZGbm5v8/f112223aefOnZKkbt26afXq1frtt99ksVhksVgUEhJi2//EiRN6+OGHFRAQIHd3d4WFhemdd96xO2ZBPS+99JLmz5+vBg0ayNPTUz179tSRI0dkGIaeffZZ1alTRx4eHrr77rt1+vTpQrWvXbtWXbp0kZeXl3x8fNS7d2/99NNPdn0GDx4sb29vHTx4UL169ZKPj48GDRp0ye/14MGDat68eaHQJEn+/v6F2pYsWaK2bdvKw8ND1apV0/33368jR44U6ldwnh4eHmrfvr2+/vprdevWTd26dbP12bhxoywWiz788ENNmzZNtWvXlo+Pj+69916lp6crOztbjz32mPz9/eXt7a0hQ4YoOzu7RDV169ZNLVq00M8//6zu3bvL09NTtWvX1syZM+3qadeunSRpyJAhtt93wXX09ddf67777lPdunXl5uam4OBgjRs3zu4W0cGDB2v+/PmSZNvfYrHYthf1jNOuXbt0xx13yNfXV97e3urRo4e+/fZbuz6LFy+WxWLRN998o5iYGNWsWVNeXl665557lJaWVug7AYCKhhknACgn//vf/9SgQQN17NixVMcdOXKkPv74Y40ePVrNmjXTqVOntHnzZu3du1c33nijnnrqKaWnp+v333/Xyy+/LEny9vaWJJ0/f17dunXTgQMHNHr0aNWvX18fffSRBg8erDNnztiCXIH//Oc/ysnJ0ZgxY3T69GnNnDlT/fv316233qqNGzdq4sSJOnDggF599VWNHz9eb7/9tm3f9957T9HR0YqMjNSLL76orKwsLVy4UJ07d9auXbvswtzFixcVGRmpzp0766WXXpKnp+clz79evXraunWrfvzxR7Vo0eKy39X06dM1ZcoU9e/fX8OGDVNaWppeffVV3XLLLdq1a5ctfC1cuFCjR49Wly5dNG7cOCUlJalv376qWrWq6tSpU2jcGTNmyMPDQ5MmTbKdf+XKleXi4qI//vhDcXFx+vbbb7V48WLVr19fU6dOdbgmSfrjjz90++23q1+/furfv78+/vhjTZw4US1bttQdd9yhpk2b6plnntHUqVM1YsQIdenSRZJs19xHH32krKwsPfLII6pevbq2bdumV199Vb///rs++ugjSdI///lPHTt2TOvXr9d777132e9Tkn766Sd16dJFvr6+euKJJ1S5cmW9/vrr6tatmzZt2qTw8HC7/mPGjFHVqlUVGxurpKQkzZkzR6NHj9ayZctMjwUATmUAAMpcenq6Icm4++67i9X/8OHDhiQjPj6+0DZJRmxsrO1nPz8/Y9SoUZcdr3fv3ka9evUKtc+ZM8eQZCxZssTWlpOTY3To0MHw9vY2MjIy7OqpWbOmcebMGVvfyZMnG5KMsLAwIzc319Y+cOBAw9XV1bhw4YJhGIaRmZlpVKlSxRg+fLjd8VNSUgw/Pz+79ujoaEOSMWnSpMueU4HPP//csFqthtVqNTp06GA88cQTxmeffWbk5OTY9UtKSjKsVqsxffp0u/Y9e/YYlSpVsrVnZ2cb1atXN9q1a2d3TosXLzYkGV27drW1bdiwwZBktGjRwu54AwcONCwWi3HHHXfYHatDhw52v4fi1mQYhtG1a1dDkvHuu+/a2rKzs43AwEDjH//4h61t+/btl7x2srKyCrXNmDHDsFgsxm+//WZrGzVqlHGpPxH+fv317dvXcHV1NQ4ePGhrO3bsmOHj42Pccssttrb4+HhDkhEREWHk5+fb2seNG2dYrVa76woAKiJu1QOAcpCRkSFJ8vHxKfWxq1Spou+++07Hjh1zeN81a9YoMDBQAwcOtLVVrlxZY8eO1dmzZ7Vp0ya7/vfdd5/8/PxsPxfMJjz44IN2iwWEh4crJydHR48elSStX79eZ86c0cCBA3Xy5Enbx2q1Kjw8XBs2bChU2yOPPFKsc7jtttu0detW3XXXXdq9e7dmzpypyMhI1a5dW6tWrbL1W758ufLz89W/f3+7GgIDA9W4cWNbDd9//71OnTql4cOH253ToEGDVLVq1SJriIqKUuXKle3O3zAMDR061K5feHi4jhw5oosXLzpUUwFvb289+OCDtp9dXV3Vvn17HTp0qFjflYeHh+2/z507p5MnT6pjx44yDEO7du0q1hh/lZeXp88//1x9+/ZVgwYNbO21atXSAw88oM2bN9uu/QIjRoywu/WvS5cuysvL02+//ebw8QGgPHGrHgCUA19fX0l/Po9U2mbOnKno6GgFBwerbdu26tWrl6Kiouz+kL2U3377TY0bN5aLi/3/jta0aVPb9r+qW7eu3c8FISo4OLjI9j/++EOS9Ouvv0qSbr311iLrKPh+ClSqVKnIW+IupV27dlq+fLlycnK0e/durVixQi+//LLuvfdeJSYmqlmzZvr1119lGIYaN25c5BgFwafgnBs1alSopr/eTvhXjnwv+fn5Sk9PV/Xq1YtdU4E6derYhQ5Jqlq1qn744Yci9/+75ORkTZ06VatWrbL9bgqkp6cXa4y/SktLU1ZWlm644YZC25o2bar8/HwdOXJEzZs3t7X//bsqCKN/rwcAKhqCEwCUA19fXwUFBenHH38sVv+//3FcIC8vr1Bb//791aVLF61YsUKff/65/v3vf+vFF1/U8uXLdccdd1xR3X9ntVodajf+/3LW+fn5kv58zikwMLBQv78vbe3m5lYozBWHq6ur2rVrp3bt2ik0NFRDhgzRRx99pNjYWOXn58tisWjt2rVF1lvw3FdJXMn34khNZuNdTl5enm677TadPn1aEydOVJMmTeTl5aWjR49q8ODBtt9RWbuScwAAZyI4AUA5ufPOO/XGG29o69at6tChw2X7Fvyv8GfOnLFrv9TtTLVq1dKjjz6qRx99VCdOnNCNN96o6dOn24LTpYJYvXr19MMPPyg/P98uqOzbt8+2vTQ0bNhQ0p+r3EVERJTKmGZuuukmSdLx48dtNRiGofr16ys0NPSS+xWc84EDB9S9e3db+8WLF5WUlKRWrVqVWo3FrckRl/pd79mzR7/88oveeecdRUVF2drXr19f7DH+rmbNmvL09NT+/fsLbdu3b59cXFwKzboBwNWKZ5wAoJw88cQT8vLy0rBhw5Samlpo+8GDBzV37lxJf85Q1ahRQ1999ZVdnwULFtj9nJeXV+gWK39/fwUFBdkte+3l5VXkrVi9evVSSkqK3YpmFy9e1Kuvvipvb2917drV8RMtQmRkpHx9ffX8888rNze30PYrWY56w4YNRc5WrFmzRpJst5H169dPVqtV06ZNK9TfMAydOnVK0p+Bq3r16lq0aJHtWSTpzxUFS/t2suLW5IiC9139PXQXzPT89TiGYdiuueKM8XdWq1U9e/bUf//7X7uXK6empur9999X586dC92GCQBXK2acAKCcNGzYUO+//74GDBigpk2bKioqSi1atFBOTo62bNliWwa8wLBhw/TCCy9o2LBhuummm/TVV1/pl19+sRszMzNTderU0b333quwsDB5e3vriy++0Pbt2zVr1ixbv7Zt22rZsmWKiYlRu3bt5O3trT59+mjEiBF6/fXXNXjwYO3YsUMhISH6+OOP9c0332jOnDmltpiFr6+vFi5cqIceekg33nij7r//ftWsWVPJyclavXq1OnXqpHnz5pVo7DFjxigrK0v33HOPmjRpYvs+ly1bppCQEA0ZMkTSn9//c889p8mTJ9uWF/fx8dHhw4e1YsUKjRgxQuPHj5erq6vi4uI0ZswY3Xrrrerfv7+SkpK0ePFiNWzYsNizMcVR3JocHbNKlSp67bXX5OPjIy8vL4WHh6tJkyZq2LChxo8fr6NH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apWSk5OVk5Njt2327NmlUhgAAABQUeXl5Sk3N9fZZaAYXF1d5eJy5fNFDgenhIQE3XXXXWrQoIH27dunFi1aKCkpSYZh6MYbb7ziggAAAICKyjAMpaSk6MyZM84uBcXk4uKi+vXry9XV9YrGcTg4TZ48WePHj9e0adPk4+OjTz75RP7+/ho0aJBuv/32KyoGAAAAqMgKQpO/v788PT1lsVicXRIuIz8/X8eOHdPx48dVt27dK/p9ORyc9u7dqw8++ODPnStV0vnz5+Xt7a1nnnlGd999tx555JESFwMAAABUVHl5ebbQVL16dWeXg2KqWbOmjh07posXL6py5colHsfhm/28vLxszzXVqlVLBw8etG07efJkiQsBAAAAKrKCZ5o8PT2dXAkcUXCLXl5e3hWN4/CM080336zNmzeradOm6tWrlx5//HHt2bNHy5cv180333xFxQAAAAAVHbfnXV1K6/flcHCaPXu2zp49K0maNm2azp49q2XLlqlx48asqAcAAADgmuRwcGrQoIHtv728vPTaa6+VakEAAADA9cRisWjFihXq27evs0vBZZRoQfMzZ87ozTff1OTJk3X69GlJ0s6dO3X06NFSLQ4AAAC4mqWkpGjMmDFq0KCB3NzcFBwcrD59+ighIcHZpV3S4cOH9cADDygoKEju7u6qU6eO7r77bu3bt0+SlJSUJIvFosTERIfHtlgsWrlyZekWXE4cnnH64YcfFBERIT8/PyUlJWn48OGqVq2ali9fruTkZL377rtlUScAAABwVUlKSlKnTp1UpUoV/fvf/1bLli2Vm5urzz77TKNGjbIFkbKQk5NTovcW5ebm6rbbbtMNN9yg5cuXq1atWvr999+1du3a6/7dVQ7POMXExGjw4MH69ddf5e7ubmvv1auXvvrqK4cLmD9/vkJCQuTu7q7w8HBt27btsv3PnDmjUaNGqVatWnJzc1NoaKjWrFnj8HEBAACAsvToo4/KYrFo27Zt+sc//qHQ0FA1b95cMTEx+vbbb+36njx5Uvfcc488PT3VuHFjrVq1yrZt8eLFqlKlil3/lStX2i16EBcXp9atW+vNN99U/fr1bX+nWywWvfnmm5cc++9++uknHTx4UAsWLNDNN9+sevXqqVOnTnruuedsC8HVr19fktSmTRtZLBZ169ZNkrR9+3bddtttqlGjhvz8/NS1a1ft3LnTNnZISIgk6Z577pHFYrH9PHjw4EK3KT722GO2cSXp448/VsuWLeXh4aHq1asrIiJC586du+R5lAWHg9P27dv1z3/+s1B77dq1lZKS4tBYy5YtU0xMjGJjY7Vz506FhYUpMjJSJ06cKLJ/Tk6ObrvtNiUlJenjjz/W/v37tWjRItWuXdvR0wAAAADKzOnTp7Vu3TqNGjVKXl5ehbb/PQhNmzZN/fv31w8//KBevXpp0KBBtkdiiuvAgQP65JNPtHz5crvb6BwZu2bNmnJxcdHHH398yeW7CyY6vvjiCx0/flzLly+XJGVmZio6OlqbN2/Wt99+q8aNG6tXr17KzMyU9GeOkKT4+HgdP37c9rOZ48ePa+DAgRo6dKj27t2rjRs3ql+/fjIMo1j7lxaHg5Obm5syMjIKtf/yyy+qWbOmQ2PNnj1bw4cP15AhQ9SsWTO99tpr8vT01Ntvv11k/7ffflunT5/WypUr1alTJ4WEhKhr164KCwtz9DQAAACAMnPgwAEZhqEmTZoUq//gwYM1cOBANWrUSM8//7zOnj1reifW3+Xk5Ojdd99VmzZt1KpVqxKNXbt2bb3yyiuaOnWqqlatqltvvVXPPvusDh06ZOtT8Dd/9erVFRgYqGrVqkmSbr31Vj344INq0qSJmjZtqjfeeENZWVnatGmT3X5VqlRRYGBgsbPD8ePHdfHiRfXr108hISFq2bKlHn30UXl7ezv0/Vwph4PTXXfdpWeeecb2AjCLxaLk5GRNnDhR//jHP4o9Tk5Ojnbs2KGIiIj/K8bFRREREdq6dWuR+6xatUodOnTQqFGjFBAQoBYtWuj555+/7MussrOzlZGRYfcBAAAAypKjsyF/DTpeXl7y9fW95F1Yl1KvXr0iw4ijY48aNUopKSn6z3/+ow4dOuijjz5S8+bNtX79+ssePzU1VcOHD1fjxo3l5+cnX19fnT17VsnJyQ6dx9+FhYWpR48eatmype677z4tWrRIf/zxxxWNWRIOB6dZs2bp7Nmz8vf31/nz59W1a1c1atRIPj4+mj59erHHOXnypPLy8hQQEGDXHhAQcMlb/g4dOmSbNlyzZo2mTJmiWbNm6bnnnrvkcWbMmCE/Pz/bJzg4uNg1AgAAACXRuHFjWSyWYi8AUblyZbufLRaL8vPzJf05ufD3IFYwifFXRd0SaDb2pfj4+KhPnz6aPn26du/erS5dulz2b25Jio6OVmJioubOnastW7YoMTFR1atXV05OzmX3Mzs/q9Wq9evXa+3atWrWrJleffVV3XDDDTp8+PBlxy1tDgcnPz8/rV+/Xv/73//0yiuvaPTo0VqzZo02bdp0yV9WacnPz5e/v7/eeOMNtW3bVgMGDNBTTz112XdJTZ48Wenp6bbPkSNHyrRGAAAAoFq1aoqMjNT8+fOLXMTAkRXqatasqczMTLtxSrIUeElZLBY1adLEdvyC1fr+ftfXN998o7Fjx6pXr15q3ry53NzcdPLkSbs+lStXLrRfzZo1dfz4cbu2v5+fxWJRp06dNG3aNO3atUuurq5asWJFaZxesTm8HPmhQ4fUoEEDde7cWZ07dy7xgWvUqCGr1arU1FS79tTUVAUGBha5T61atVS5cmVZrVZbW9OmTZWSknLJJRfd3Nzk5uZW4joBAACAkpg/f746deqk9u3b65lnnlGrVq108eJFrV+/XgsXLtTevXuLNU54eLg8PT315JNPauzYsfruu++0ePHiMqk5MTFRsbGxeuihh9SsWTO5urpq06ZNevvttzVx4kRJkr+/vzw8PLRu3TrVqVNH7u7u8vPzU+PGjfXee+/ppptuUkZGhiZMmCAPDw+78UNCQpSQkKBOnTrJzc3N9hzVv//9b7377rvq0KGDlixZoh9//FFt2rSRJH333XdKSEhQz5495e/vr++++05paWlq2rRpmXwHl+LwjFOjRo3UvXt3LVmyRBcuXCjxgV1dXdW2bVu7l3/l5+crISFBHTp0KHKfTp066cCBA3ZTi7/88otq1apVonXqAQAAgLLSoEED7dy5U927d9fjjz+uFi1a6LbbblNCQoIWLlxY7HGqVaumJUuWaM2aNWrZsqU++OADxcXFlUnNderUUUhIiKZNm6bw8HDdeOONmjt3rqZNm6annnpKklSpUiW98sorev311xUUFKS7775bkvTWW2/pjz/+0I033qiHHnpIY8eOlb+/v934s2bN0vr16xUcHGwLRpGRkZoyZYqeeOIJtWvXTpmZmYqKirLt4+vrq6+++kq9evVSaGionn76ac2aNUt33HFHmXwHl2IxHHxyLTExUfHx8frggw+Uk5OjAQMGaOjQoQoPD3f44MuWLVN0dLRef/11tW/fXnPmzNGHH36offv2KSAgQFFR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\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df_encoded.head(2)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 231
        },
        "id": "0gFR1iFxlwqm",
        "outputId": "e5523148-921b-48d6-c404-eb78fe4421b2"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   customerID  SeniorCitizen  tenure  MonthlyCharges  TotalCharges  Churn  \\\n",
              "0  7590-VHVEG              0       1           29.85         29.85      0   \n",
              "1  5575-GNVDE              0      34           56.95       1889.50      0   \n",
              "\n",
              "   gender_Female  gender_Male  Partner_No  Partner_Yes  ...  \\\n",
              "0           True        False       False         True  ...   \n",
              "1          False         True        True        False  ...   \n",
              "\n",
              "   Contract_Month-to-month  Contract_One year  Contract_Two year  \\\n",
              "0                     True              False              False   \n",
              "1                    False               True              False   \n",
              "\n",
              "   PaperlessBilling_No  PaperlessBilling_Yes  \\\n",
              "0                False                  True   \n",
              "1                 True                 False   \n",
              "\n",
              "   PaymentMethod_Bank transfer (automatic)  \\\n",
              "0                                    False   \n",
              "1                                    False   \n",
              "\n",
              "   PaymentMethod_Credit card (automatic)  PaymentMethod_Electronic check  \\\n",
              "0                                  False                            True   \n",
              "1                                  False                           False   \n",
              "\n",
              "   PaymentMethod_Mailed check  Cluster  \n",
              "0                       False        0  \n",
              "1                        True        0  \n",
              "\n",
              "[2 rows x 48 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-7a6dda10-2f18-454f-b638-7ab1f5ce028f\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>customerID</th>\n",
              "      <th>SeniorCitizen</th>\n",
              "      <th>tenure</th>\n",
              "      <th>MonthlyCharges</th>\n",
              "      <th>TotalCharges</th>\n",
              "      <th>Churn</th>\n",
              "      <th>gender_Female</th>\n",
              "      <th>gender_Male</th>\n",
              "      <th>Partner_No</th>\n",
              "      <th>Partner_Yes</th>\n",
              "      <th>...</th>\n",
              "      <th>Contract_Month-to-month</th>\n",
              "      <th>Contract_One year</th>\n",
              "      <th>Contract_Two year</th>\n",
              "      <th>PaperlessBilling_No</th>\n",
              "      <th>PaperlessBilling_Yes</th>\n",
              "      <th>PaymentMethod_Bank transfer (automatic)</th>\n",
              "      <th>PaymentMethod_Credit card (automatic)</th>\n",
              "      <th>PaymentMethod_Electronic check</th>\n",
              "      <th>PaymentMethod_Mailed check</th>\n",
              "      <th>Cluster</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>7590-VHVEG</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>29.85</td>\n",
              "      <td>29.85</td>\n",
              "      <td>0</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "      <td>...</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>5575-GNVDE</td>\n",
              "      <td>0</td>\n",
              "      <td>34</td>\n",
              "      <td>56.95</td>\n",
              "      <td>1889.50</td>\n",
              "      <td>0</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>...</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>2 rows × 48 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-7a6dda10-2f18-454f-b638-7ab1f5ce028f')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-7a6dda10-2f18-454f-b638-7ab1f5ce028f button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-7a6dda10-2f18-454f-b638-7ab1f5ce028f');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-a7604168-bd20-49b0-9f02-ce290e4cbc21\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-a7604168-bd20-49b0-9f02-ce290e4cbc21')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-a7604168-bd20-49b0-9f02-ce290e4cbc21 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df_encoded"
            }
          },
          "metadata": {},
          "execution_count": 38
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "features = ['MonthlyCharges', 'Churn']\n",
        "\n",
        "X = StandardScaler().fit_transform(df_encoded[features])\n",
        "\n",
        "kmeans = KMeans(n_clusters=3, random_state=0)\n",
        "df_encoded['Cluster'] = kmeans.fit_predict(X)\n",
        "\n",
        "plt.figure(figsize=(10, 6))\n",
        "sns.scatterplot(data=df_encoded, x='Churn', y='MonthlyCharges', hue='Cluster', palette='viridis')\n",
        "plt.title('Customer Segmentation')\n",
        "plt.xlabel('churn')\n",
        "plt.ylabel('Monthly Charges')\n",
        "plt.legend(title='Churn Status', labels=['cluster 0', 'cluster 1','cluster 2','cluster 3'])\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 619
        },
        "id": "yXPRkUjImlVh",
        "outputId": "15e67d68-916f-495e-bb49-4e86c87c34c9"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/cluster/_kmeans.py:870: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n",
            "  warnings.warn(\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Task 4: Churn Prediction Model**"
      ],
      "metadata": {
        "id": "1nFqOcW3t_ZD"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "df['Churn'] = df['Churn'].map({'Yes': 1, 'No': 0})\n",
        "lr = LinearRegression()\n",
        "X = df[['MonthlyCharges', 'TotalCharges']]\n",
        "Y = df_encoded['Churn']\n",
        "lr.fit(X,Y)\n",
        "Y_hat = lr.predict(X)\n",
        "coeff = lr.coef_\n",
        "intercept = lr.intercept_\n",
        "print(coeff)\n",
        "print(intercept)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "_am90fjVimi6",
        "outputId": "8742ce33-0f95-4f77-8983-30d718e734da"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[ 0.00821829 -0.0001099 ]\n",
            "-0.015936204481547755\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.columns"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "SxBZufYFkbvq",
        "outputId": "faa86b9a-b205-43fe-8f1c-0a9b2480c2c6"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Index(['customerID', 'gender', 'SeniorCitizen', 'Partner', 'Dependents',\n",
              "       'tenure', 'PhoneService', 'MultipleLines', 'InternetService',\n",
              "       'OnlineSecurity', 'OnlineBackup', 'DeviceProtection', 'TechSupport',\n",
              "       'StreamingTV', 'StreamingMovies', 'Contract', 'PaperlessBilling',\n",
              "       'PaymentMethod', 'MonthlyCharges', 'TotalCharges', 'Churn'],\n",
              "      dtype='object')"
            ]
          },
          "metadata": {},
          "execution_count": 41
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.head(2)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 196
        },
        "id": "0lKXqiTPk27a",
        "outputId": "42da74b3-2108-4765-aa9f-2b6b45b2a908"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   customerID  gender  SeniorCitizen Partner Dependents  tenure PhoneService  \\\n",
              "0  7590-VHVEG  Female              0     Yes         No       1           No   \n",
              "1  5575-GNVDE    Male              0      No         No      34          Yes   \n",
              "\n",
              "      MultipleLines InternetService OnlineSecurity  ... DeviceProtection  \\\n",
              "0  No phone service             DSL             No  ...               No   \n",
              "1                No             DSL            Yes  ...              Yes   \n",
              "\n",
              "  TechSupport StreamingTV StreamingMovies        Contract PaperlessBilling  \\\n",
              "0          No          No              No  Month-to-month              Yes   \n",
              "1          No          No              No        One year               No   \n",
              "\n",
              "      PaymentMethod MonthlyCharges  TotalCharges  Churn  \n",
              "0  Electronic check          29.85         29.85    NaN  \n",
              "1      Mailed check          56.95       1889.50    NaN  \n",
              "\n",
              "[2 rows x 21 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-88f63bcd-f690-4d1a-8fe9-d9da110a9af1\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>customerID</th>\n",
              "      <th>gender</th>\n",
              "      <th>SeniorCitizen</th>\n",
              "      <th>Partner</th>\n",
              "      <th>Dependents</th>\n",
              "      <th>tenure</th>\n",
              "      <th>PhoneService</th>\n",
              "      <th>MultipleLines</th>\n",
              "      <th>InternetService</th>\n",
              "      <th>OnlineSecurity</th>\n",
              "      <th>...</th>\n",
              "      <th>DeviceProtection</th>\n",
              "      <th>TechSupport</th>\n",
              "      <th>StreamingTV</th>\n",
              "      <th>StreamingMovies</th>\n",
              "      <th>Contract</th>\n",
              "      <th>PaperlessBilling</th>\n",
              "      <th>PaymentMethod</th>\n",
              "      <th>MonthlyCharges</th>\n",
              "      <th>TotalCharges</th>\n",
              "      <th>Churn</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>7590-VHVEG</td>\n",
              "      <td>Female</td>\n",
              "      <td>0</td>\n",
              "      <td>Yes</td>\n",
              "      <td>No</td>\n",
              "      <td>1</td>\n",
              "      <td>No</td>\n",
              "      <td>No phone service</td>\n",
              "      <td>DSL</td>\n",
              "      <td>No</td>\n",
              "      <td>...</td>\n",
              "      <td>No</td>\n",
              "      <td>No</td>\n",
              "      <td>No</td>\n",
              "      <td>No</td>\n",
              "      <td>Month-to-month</td>\n",
              "      <td>Yes</td>\n",
              "      <td>Electronic check</td>\n",
              "      <td>29.85</td>\n",
              "      <td>29.85</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>5575-GNVDE</td>\n",
              "      <td>Male</td>\n",
              "      <td>0</td>\n",
              "      <td>No</td>\n",
              "      <td>No</td>\n",
              "      <td>34</td>\n",
              "      <td>Yes</td>\n",
              "      <td>No</td>\n",
              "      <td>DSL</td>\n",
              "      <td>Yes</td>\n",
              "      <td>...</td>\n",
              "      <td>Yes</td>\n",
              "      <td>No</td>\n",
              "      <td>No</td>\n",
              "      <td>No</td>\n",
              "      <td>One year</td>\n",
              "      <td>No</td>\n",
              "      <td>Mailed check</td>\n",
              "      <td>56.95</td>\n",
              "      <td>1889.50</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>2 rows × 21 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-88f63bcd-f690-4d1a-8fe9-d9da110a9af1')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-88f63bcd-f690-4d1a-8fe9-d9da110a9af1 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-88f63bcd-f690-4d1a-8fe9-d9da110a9af1');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-6dc5d696-b585-429b-a900-afe4189eb497\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-6dc5d696-b585-429b-a900-afe4189eb497')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-6dc5d696-b585-429b-a900-afe4189eb497 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df"
            }
          },
          "metadata": {},
          "execution_count": 42
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df_encoded.head(2)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 231
        },
        "id": "05qaHO_xlZZK",
        "outputId": "bb1ad166-bb34-4074-9b24-d23ae57cb7b4"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   customerID  SeniorCitizen  tenure  MonthlyCharges  TotalCharges  Churn  \\\n",
              "0  7590-VHVEG              0       1           29.85         29.85      0   \n",
              "1  5575-GNVDE              0      34           56.95       1889.50      0   \n",
              "\n",
              "   gender_Female  gender_Male  Partner_No  Partner_Yes  ...  \\\n",
              "0           True        False       False         True  ...   \n",
              "1          False         True        True        False  ...   \n",
              "\n",
              "   Contract_Month-to-month  Contract_One year  Contract_Two year  \\\n",
              "0                     True              False              False   \n",
              "1                    False               True              False   \n",
              "\n",
              "   PaperlessBilling_No  PaperlessBilling_Yes  \\\n",
              "0                False                  True   \n",
              "1                 True                 False   \n",
              "\n",
              "   PaymentMethod_Bank transfer (automatic)  \\\n",
              "0                                    False   \n",
              "1                                    False   \n",
              "\n",
              "   PaymentMethod_Credit card (automatic)  PaymentMethod_Electronic check  \\\n",
              "0                                  False                            True   \n",
              "1                                  False                           False   \n",
              "\n",
              "   PaymentMethod_Mailed check  Cluster  \n",
              "0                       False        1  \n",
              "1                        True        1  \n",
              "\n",
              "[2 rows x 48 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-9ab9396e-146d-4961-b4da-4e195ab0c651\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>customerID</th>\n",
              "      <th>SeniorCitizen</th>\n",
              "      <th>tenure</th>\n",
              "      <th>MonthlyCharges</th>\n",
              "      <th>TotalCharges</th>\n",
              "      <th>Churn</th>\n",
              "      <th>gender_Female</th>\n",
              "      <th>gender_Male</th>\n",
              "      <th>Partner_No</th>\n",
              "      <th>Partner_Yes</th>\n",
              "      <th>...</th>\n",
              "      <th>Contract_Month-to-month</th>\n",
              "      <th>Contract_One year</th>\n",
              "      <th>Contract_Two year</th>\n",
              "      <th>PaperlessBilling_No</th>\n",
              "      <th>PaperlessBilling_Yes</th>\n",
              "      <th>PaymentMethod_Bank transfer (automatic)</th>\n",
              "      <th>PaymentMethod_Credit card (automatic)</th>\n",
              "      <th>PaymentMethod_Electronic check</th>\n",
              "      <th>PaymentMethod_Mailed check</th>\n",
              "      <th>Cluster</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>7590-VHVEG</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>29.85</td>\n",
              "      <td>29.85</td>\n",
              "      <td>0</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "      <td>...</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>5575-GNVDE</td>\n",
              "      <td>0</td>\n",
              "      <td>34</td>\n",
              "      <td>56.95</td>\n",
              "      <td>1889.50</td>\n",
              "      <td>0</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>...</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>2 rows × 48 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-9ab9396e-146d-4961-b4da-4e195ab0c651')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-9ab9396e-146d-4961-b4da-4e195ab0c651 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-9ab9396e-146d-4961-b4da-4e195ab0c651');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-2cd5b6f5-67cb-4f3d-81cc-485411d53c6a\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-2cd5b6f5-67cb-4f3d-81cc-485411d53c6a')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-2cd5b6f5-67cb-4f3d-81cc-485411d53c6a button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df_encoded"
            }
          },
          "metadata": {},
          "execution_count": 43
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Import necessary libraries\n",
        "import pandas as pd\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.linear_model import LogisticRegression\n",
        "from sklearn.tree import DecisionTreeClassifier\n",
        "from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score\n",
        "from sklearn.feature_selection import SelectKBest, f_regression\n",
        "from sklearn.model_selection import GridSearchCV\n",
        "\n",
        "# Load data\n",
        "data = pd.read_csv(\"telco_cus.csv\")\n",
        "\n",
        "# Split data into training and testing sets\n",
        "X_train, X_test, y_train, y_test = train_test_split(data.drop(\"Churn\", axis=1), data[\"Churn\"], test_size=0.2, random_state=42)\n",
        "\n",
        "# Train multiple models\n",
        "models = {\n",
        "    \"Logistic Regression\": LogisticRegression(),\n",
        "    \"Decision Tree\": DecisionTreeClassifier(),\n",
        "}\n",
        "\n",
        "for name, model in models.items():\n",
        "    model.fit(X_train, y_train)\n",
        "    y_pred = model.predict(X_test)\n",
        "    print(f\"Model: {name}\")\n",
        "    print(f\"Accuracy: {accuracy_score(y_test, y_pred)}\")\n",
        "    print(f\"Precision: {precision_score(y_test, y_pred)}\")\n",
        "    print(f\"Recall: {recall_score(y_test, y_pred)}\")\n",
        "    print(f\"F1 Score: {f1_score(y_test, y_pred)}\")\n",
        "    print()\n",
        "\n",
        "# Perform feature selection\n",
        "selector = SelectKBest(f_regression, k=5)\n",
        "X_train_selected = selector.fit_transform(X_train, y_train)\n",
        "X_test_selected = selector.transform(X_test)\n",
        "\n",
        "# Train models again with selected features\n",
        "for name, model in models.items():\n",
        "    model.fit(X_train_selected, y_train)\n",
        "    y_pred = model.predict(X_test_selected)\n",
        "    print(f\"Model: {name} (with feature selection)\")\n",
        "    print(f\"Accuracy: {accuracy_score(y_test, y_pred)}\")\n",
        "    print(f\"Precision: {precision_score(y_test, y_pred)}\")"
      ],
      "metadata": {
        "id": "sOEOWFLHPPbu"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "Bref about all the task and all\n",
        "\n",
        "Task 1 [Data Preparation] : performed various operation on the data set like finding missing value replacing it with mean or removing the column splitting the data set so that further model be prepared for prediction ,converting categorical variable encoding for non numeric entry gain necessary understanding of the data set and clean it to get basic insite is of the data\n",
        "\n",
        "skills used :\n",
        "Data loading, data exploration,\n",
        "Handling missing values,\n",
        "Data preprocessing,\n",
        "Categorical variable encoding,\n",
        "Dataset splitting."
      ],
      "metadata": {
        "id": "nqlx2BArw0_b"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Task 2 [Exploratory Data Analysis (EDA)] :  performed various operation to gain visual insite of the data \"how\" they are related to each other what are the factor that affect the churn rate ploted different plots like 'bar graph' , 'Kernel Density Estimation plot' ;\n",
        "calculation of pearsons correlation  p value and  correlation by how much number they are affecting the churn  affter performing\n",
        "basic assumption /prediction : churn rate is mostly affected by monthly charge and total charge\n",
        "\n",
        "Important statical finding\n",
        "\n",
        "total charge vs churn rate\n",
        "Pearson correlation coefficient: -0.1994277150883139\n",
        "P-value: 4.233836384879152e-64\n",
        "\n",
        "monthly charge vs churn rate\n",
        "Pearson correlation coefficient: 0.19335642223784708\n",
        "P-value: 2.706645606888192e-60\n",
        "\n",
        "Correlation of Churn and MonthlyCharges:\n",
        "                MonthlyCharges  Churn_numeric\n",
        "MonthlyCharges        1.000000       0.193356\n",
        "Churn_numeric         0.193356       1.000000\n",
        "Correlation of Churn and TotalCharges:\n",
        "               TotalCharges  Churn_numeric\n",
        "TotalCharges       1.000000      -0.199428\n",
        "Churn_numeric     -0.199428       1.000000\n",
        "\n",
        "calculated churn rate : 26.536987079369588  \n",
        "\n",
        "churn rate percentage is less but can't be ignored for the growth\n",
        "\n",
        "\n",
        "Skill used : Data visualization, statistical analysis\n",
        "Exploratory data analysis\n",
        "Understanding of customer demographic\n",
        "variables\n",
        "Churn rate calculation."
      ],
      "metadata": {
        "id": "vCZe5IqDzJbc"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Task 3 [Customer Segmentation]: performed different operation to gain insite of customer segmentation what are  percised relation of other factor with churn how they are affecting it\n",
        "operation done : elbow method and k-means\n",
        "\n",
        "elbow method is ploted how much clusters are formed in the data set , the plot is between wcss(within cluster sum of square) and tenure , wcss ws total charges ,  wcss vs contracts ,\n",
        "\n",
        "then k-means scatter plot are ploted to uninformed model is given and ploted to know what type of customer show churn , based on different based on monthly charges  , total charges and contrant\n",
        "\n",
        "At tenure < 500 churn rate is high\n",
        "At monthly charges < 500 churn rate is high\n",
        "\n",
        "\n",
        "skills used : Segmentation techniques\n",
        "Understanding of customer behavior\n",
        "Churn analysis within segments\n",
        "Identifying high-value customers."
      ],
      "metadata": {
        "id": "jSztXceO43fi"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Task 4 [Churn Prediction Model]: made the model that fits the data set well spilt the data set in 20% for testing and 80% for training purpose used 'Logistic Regression','Decision Tree','Random Forest' for regression and ploted  multiple models using metrics like accuracy, precision,recall, and F1-score. Perform feature selection\n",
        "and hyperparameter tuning are used to check the model is correct hoew much it is deviated from the actual result  to get precise result dynamically\n",
        "\n",
        " problem faced :\"can't able to solve the error \"\n",
        "\n",
        " skills used : Machine learning algorithms\n",
        "Model training and evaluation,\n",
        "Feature selection, hyperparameter tuning\n",
        "Understanding of classification metrics."
      ],
      "metadata": {
        "id": "TWTNJyg-HSnq"
      }
    },
    {
      "cell_type": "markdown",
      "source": [],
      "metadata": {
        "id": "zfnfAAD7Mgph"
      }
    }
  ]
}